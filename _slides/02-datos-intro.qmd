---
title: "Datos en R"
subtitle: "Introducción"
format: 
    live-revealjs: 
        scrollable: true
webr:
    packages: 
        - ggplot2
# pyodide: 
#     packages: 
#         - scikit-learn
#         - pandas
#         - matplotlib
#         - seaborn
#         - statsmodels
engine: knitr
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

## Introdución
- Antes de comenzar a trabajar con datos en R, es importante comprender los tipos de datos básicos y las estructuras de datos que se utilizan en el lenguaje.
- R es un lenguaje de programación orientado a datos, lo que significa que está diseñado para manejar y analizar datos de manera eficiente.
- En este módulo, exploraremos los tipos de datos básicos en R, cómo se almacenan y manipulan los datos, y cómo se utilizan las estructuras de datos clave, como los dataframes.


## Tipos de Datos en R

R maneja varios tipos de datos básicos:

- **Numéricos**: Incluyen tanto números decimales, como `4.5`, y números enteros, como `4`. 

- **Caracteres** (o cadenas de texto o *string* en inglés): Son textos que se representan con comillas, como "algún texto". Nota que si pones un número entre comillas, R lo considerará como un carácter (p.ej. `"4"`).

- **NA**: Representa la ausencia de un valor.

- **Lógicos**: Son valores que pueden ser `TRUE` (verdadero) o `FALSE` (falso). Estos valores se verán más adelante. 


# Ejercicio de tipo de datos

Instrucciones: - Ejecuta cada bloque de código y observa la salida. - Una vez ejecutado, verifica el tipo de dato con la función `typeof()`, la cuál nos dirá el tipo de dato del objeto que pongamos entre los paréntesis.

## Variable numérica 

```{webr}

# Crear una variable numérica
numero <- 4.5

print(numero)  # Mostrar valor

typeof(numero)  # Mostrar tipo de dato

```

::: {.callout-note}
Observa que el resultado de `typeof()` es `double`, que es el tipo de dato que R utiliza para números decimales.
:::

## Variable numérica entera

```{webr}

# Crear una variable entera
# Para esto, se agrega la letra "L" al final del número
entero <- 4L

print(entero)

typeof(entero)

```

::: {.callout-note}
En este caso, el resultado de `typeof()` es `integer`, que es el tipo de dato que R utiliza para números enteros. En la práctica, no es necesario especificar explícitamente que un número es entero, ya que R maneja automáticamente los números enteros y decimales.
:::

## Variable de carácter

Reemplaza el guion bajo por un texto entre comillas para crear una variable de carácter. Corre el código y verifica que el tipo de dato sea correcto.

```{webr}
#| exercise: datos_ex_1

# Crear una variable de carácter
caracter <- ______

print(caracter)

typeof(caracter)

```


```{webr}
#| exercise: datos_ex_1
#| check: true

# Evaluate the student's expression to get the result
if (identical(typeof(caracter), "character")) {
  list(correct = TRUE, message = "Correcto! La variable es de tipo caracter.")
} else {
  list(correct = FALSE, message = "Incorrecto.")
}
```


::: { .solution exercise="datos_ex_1" }
::: { .callout-tip collapse="false"}
## Solución

```r
caracter <- "Hola Mundo"

print(caracter)

typeof(caracter)
```

:::
:::

##


```{webr}
#| exercise: datos_ex_2

# Crear un vector de caracteres
vector_caracter <- c(______, ______, ______)

# Muestra los valores del vector
print(______)

# Muestra el tipo de dato del vector
print(typeof(______))


```

```{webr}
#| exercise: datos_ex_2
#| check: true

# Evaluate the student's expression to get the result
if (identical(typeof(vector_caracter), "character")) {
  list(correct = TRUE, message = "Correcto! El vector es de tipo caracter.")
} else {
  list(correct = FALSE, message = "Incorrecto.")
}
```


::: { .solution exercise="datos_ex_2" }
::: { .callout-tip collapse="false"}
## Solución

```r
vector_caracter <- c("Hola", "mundo", "!")

# Muestra los valores del vector
print(vector_caracter)

# Muestra el tipo de dato del vector
print(typeof(vector_caracter))
```

:::
:::

##

::: {.callout-note}
Observa que si un número está entre comillas, este se convierte en un valor de caracter. Observa que si tratamos de hacer una operación aritmética con un número de caracter, obtendremos un error. Esto se debe a que R no puede sumar un número y un carácter. ¿Puedes solucionarlo y realizar la suma correctamente?

```{webr}

# Crear una variable numérica
numero_caracter <- "4.5"

print(numero_caracter)  # Mostrar valor

typeof(numero_caracter)  # Mostrar tipo de dato

# Descomenta y ejecuta la siguiente línea para ver el resultado de la suma
# numero_caracter + 1
```


Solución:

Quitar las comillas para que el número sea tratado como un número y no como un carácter.

:::

## NA {.smaller}

- NA es un valor especial en R que representa la ausencia de un valor.
- Puedes usar NA para indicar que un valor no está disponible o no se conoce. 
- Por ejemplo, si no tienes información sobre la edad de una persona, puedes usar NA para indicar que la edad es desconocida.
- Ten cuidado al trabajar con NA, ya que puede afectar el resultado de tus operaciones. 
- Por ejemplo, si sumas un número y NA, el resultado será NA. Esto se conoce como "propagación de NA".

```{webr}

# Suma de un número y NA
numero <- 4
na <- NA
numero + na

```

# Fin
- En la siguiente lección, veremos cómo importar y trabajar con datos en R.







