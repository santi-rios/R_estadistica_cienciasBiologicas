---
title: "Transformación de Rango y Correlaciones Pearson y Spearman"
author:
  - name: "Mtro. Santiago Ríos"
    email: santiagoboo99@gmail.com
    affiliation: 
      - name: Cursos Orca
        city: CDMX
        url: orcaasesina.com
format: 
    live-html:
        highlightStyle: github
        highlightLines: true
        theme: superhero
toc: true
sidebar: false
webr:
    packages: 
        - datos
        - dplyr
        - tidyr
        - ggplot2
    render-df: gt-interactive
engine: knitr
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}


---

#### **Transformación de Rango y Correlación de Spearman**

En este punto, introducimos la **transformación de rango**, que es la base de la correlación de Spearman. La transformación de rango simplemente toma una lista de números y los reemplaza con enteros que indican su orden (el número más pequeño es el 1, el siguiente más pequeño es el 2, etc.). Esta transformación convierte un conjunto de datos en una representación ordenada, lo que permite calcular la correlación sin hacer suposiciones sobre la distribución de los datos.

---

### **Puntos clave:**

1. **Rango de una lista de números**: El rango de una lista de números los organiza de menor a mayor, asignando un valor entero a cada uno. Por ejemplo, si tenemos los números `c(3.6, 3.4, -5.0, 8.2)`, los rangos serían `3, 2, 1, 4`.

2. **Correlación de Spearman**: Es simplemente la correlación de Pearson aplicada a los rangos de los datos. 

---

### **Ejemplo en R: Visualización de Pearson vs Spearman**

A continuación, vamos a visualizar cómo se comportan las correlaciones de Pearson y Spearman al comparar los valores originales con los rangos.

```{webr}
#| include: false

# Cargar librerías necesarias
library(tidyverse) 
library(MASS) # Para generar datos correlacionados
library(broom) # Para extraer coeficientes de modelos

# Fijar semilla para reproducibilidad
set.seed(40)

# Generar datos correlacionados
D_correlation <- MASS::mvrnorm(30, mu = c(0.9, 0.9), Sigma = matrix(c(1, 0.8, 0.8, 1), ncol = 2), empirical = TRUE) %>%
  as_tibble() %>%
  rename(X1 = V1, X2 = V2)


```

```{webr}
#| edit: false
#| runbutton: false


# Ver las primeras filas de los datos
head(D_correlation)

```

#### **Paso 1: Visualización de la Correlación de Spearman**

Primero calculamos la intersección ($\beta_0$) para la correlación de Spearman y luego visualizamos los datos en una gráfica donde se muestran las etiquetas correspondientes a los rangos.

- En el siguiente gráfico, la línea azul representa el intercepto de Spearman ($\beta_0$) y la línea roja representa la pendiente ($\beta_1$).
- Los puntos en la gráfica están etiquetados con sus rangos correspondientes. Estos puntos tienen 2 valores: el rango de la variable X1 y el rango de la variable X2. Observa que en X1, el rango va de izquierda a derecha, mientras que en X2, el rango va de abajo hacia arriba.

::: {.callout collapse="true"}
## Click para ver el código utilizado

```{webr}
#| edit: false
#| runbutton: false
#| warning: false

# Calcular el intercepto de Spearman
intercepto_spearman <- coefficients(lm(rank(D_correlation$X2) ~ rank(D_correlation$X1)))[1]

# Graficar la correlación de Spearman
P_spearman <- ggplot(D_correlation, aes(x = rank(X1), y = rank(X2))) +
  geom_smooth(method = "lm", se = FALSE, lwd = 2, aes(color = 'beta_1')) +
  geom_text(aes(label = sprintf('(%i,%i)', rank(X1), rank(X2))), nudge_y = 1, size = 3, color = 'dark gray') +
  geom_segment(x = -100, xend = 100, 
               y = intercepto_spearman, yend = intercepto_spearman, 
               lwd = 2, aes(color = 'beta_0')) +
  scale_color_manual(name = NULL, values = c("blue", "red"), 
                     labels = c(bquote(beta[0] * " (intercept)"), bquote(beta[1] * " (slope)"))) +
  labs(title = "Correlación de Spearman")


```
:::

```{webr}
#| edit: false
#| runbutton: false

# Mostrar la gráfica de Spearman
P_spearman
```


#### **Paso 2: Mostrar Pearson y Spearman juntos**



::: {.callout collapse="true"}
## Click para ver el código utilizado


```{webr}
#| edit: false
#| runbutton: false
#| warning: false


# Ajustar modelo lineal para la correlación de Pearson
modelo_pearson <- lm(X2 ~ X1, data = D_correlation)

# Intercepto del modelo
intercepto_pearson <- coef(modelo_pearson)[1]

# Graficar la relación entre X1 y X2
P_pearson <- ggplot(D_correlation, aes(x = X1, y = X2)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "red", lwd = 1) +
  geom_segment(x = -3, xend = 3, y = intercepto_pearson, yend = intercepto_pearson, 
               linetype = "dotted", color = "blue", lwd = 1) +
  labs(title = "Correlación de Pearson", x = "X1", y = "X2")


```

:::

```{webr}	
#| edit: false
#| runbutton: false
#| warning: false
library(patchwork) # Paquete para juntar gráficas


# Juntar las gráficas de Pearson y Spearman
(P_pearson + geom_text(aes(label = sprintf('(%.1f,%.1f)', X1, X2)), nudge_y = 0.1, size = 3, color = 'dark gray') + 
  labs(title = '         Pearson')) + 
(P_spearman + scale_x_continuous(limits = c(-7.5, 30)) + scale_y_continuous(limits = c(-7.5, 30)) + 
  labs(title = '         Spearman'))

```

---

## **Teoría: Transformación de Rango**

La transformación de rango, como se mencionó anteriormente, toma una lista de números y reemplaza cada valor con su posición relativa (orden) dentro de la lista. Esta técnica es la base de muchos **tests no paramétricos**, ya que permite trabajar con datos que no necesariamente siguen una distribución normal.

- En R, podemos calcular el rango de un vector de números usando la función `rank()`.

- **Ejemplo de transformación de rango**:

```{webr}
# Ejemplo de transformación de rango
valores <- c(3.6, 3.4, -5.0, 8.2)
rango_valores <- rank(valores)
rango_valores
```

**Ejemplo: Calcular Spearman con rangos**

- Usaremos el conjunto de datos `mtcars` para calcular la correlación de Spearman entre el **peso del vehículo (wt)** y el **consumo de combustible (mpg)**.
- Recuerda que podemos usar la función `cor.test()` con el método `spearman` para calcular la correlación de Spearman.
- En este caso, obtenemos el valor estimado de la correlación, llamado `rho`. 

```{webr}

# Correlación de Spearman con mtcars
cor_spearman_mtcars <- cor.test(mtcars$wt, mtcars$mpg, method = "spearman")

# Mostrar resultados
cor_spearman_mtcars
```

- Observa que podemos calcular la correlación de Spearman con la función `lm()` (modelo lineal), solo que tenemos que transformar los datos a rangos:
- En este caso, la correlación de Spearman es simplemente la pendiente del modelo lineal ajustado a los rangos de los datos. Observa que el coeficiente del rango de `mpg` es el mismo que el valor de `rho` obtenido anteriormente.

```{webr}

# Modelo lineal equivalente a los rangos
lm_spearman_mtcars <- lm(rank(wt) ~ rank(mpg), data = mtcars)

# Mostrar resultados
summary(lm_spearman_mtcars)
```

- Compara ambos enfoques para calcular la correlación de Spearman: como una prueba de correlación y como un modelo lineal con rangos.
- ¿Son los mismos resultados?


---

## **Conclusión**

La correlación de Pearson y Spearman son herramientas esenciales para evaluar relaciones entre variables. Al comprender que ambas correlaciones son casos especiales de un modelo lineal simple, los estudiantes pueden aplicar estos conocimientos de manera más efectiva. La transformación de rango es una técnica poderosa que permite convertir pruebas paramétricas en sus contrapartes no paramétricas, proporcionando una mayor flexibilidad al analizar datos no normales o con valores atípicos.