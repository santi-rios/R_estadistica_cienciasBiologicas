---
title: "Funciones"
author:
  - name: "Mtro. Santiago Ríos"
    email: santiagoboo99@gmail.com
    affiliation: 
      - name: Cursos Orca
        city: CDMX
        url: orcaasesina.com
format: 
    live-revealjs: 
        theme: serif
        toc: true
        scrollable: true
        progress: true
        slide-number: true
        incremental: true
        lang: es
        logo: "https://readr.tidyverse.org/logo.png"
        # code-link: true
webr:
    packages: 
        - dplyr
engine: knitr
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

## Funciones en R

- Las funciones son bloques de código que realizan una tarea específica. En R, las funciones son fundamentales para realizar tareas de análisis de datos, cálculos estadísticos y visualizaciones.
- La estructura básica de una función en R es la siguiente: la función es una palabra clave (verbo) seguida de una o varias instrucciones entre paréntesis `()`.

- `hacer_esto(a_esto)`

- `hacer_aquello(a_esto, a_aquello, con_aquellos)`

##

- En R, las funciones pueden tener argumentos opcionales, que se pueden especificar al llamar a la función. Por ejemplo, la función `mean()` tiene un argumento opcional llamado `na.rm`, que se utiliza para eliminar los valores faltantes (`NA`) al calcular la media.

```{webr}
# Ejemplo de función con argumento opcional
mean(c(1, 2, NA, 4), na.rm = TRUE)
```

Prueba quitando el argumento `na.rm = TRUE` y observa cómo cambia el resultado.

## Ejemplo de funciones con dplyr
- dplyr es un paquete parte de tidyverse que facilita la manipulación de datos en R.
- para comenza a usarlo, primero debes instalarlo y cargarlo en tu sesión de R.
- Para instalarlo, usa `install.packages("dplyr")` y para cargarlo, usa `library(dplyr)` o bien, `library(tidyverse)` para cargar todos los paquetes de tidyverse.

```{webr}
# cargar paquete dplyr
library(______)
```
##

- dplyr se centra en una serie de funciones verbales que hacen que la manipulación de datos sea intuitiva. 
- Aquí están las funciones más utilizadas:

    `select()` - Seleccionar columnas específicas de un marco de datos.
    `filter()` - Filtrar filas basadas en condiciones.
    `arrange()` - Reordenar filas de un marco de datos.
- Veremos más a detalle estas funciones en otra sección. Por ahora, solo familiarízate con ellas.

## Uso de dplyr


```{webr}

# Cargar el conjunto de datos
# este conjunto viene por defecto en R
data("mtcars")

# explorar el conjunto de datos
head(mtcars)


```

## 


```{webr}


# 1. Seleccionar columnas específicas
mtcars_selected <- select(mtcars, mpg, hp, wt)
head(mtcars_selected)




```

## 


```{webr}

# 2. Filtrar filas: coches con más de 100 caballos de fuerza
mtcars_filtered <- filter(mtcars, hp > 100)
head(mtcars_filtered)



```


## Operator %>% (pipa)
- El operador `%>%` (pipa) se utiliza para encadenar funciones en R, lo que facilita la manipulación de datos.
- Observa cómo podemos select, filter y head en una sola línea de código usando `%>%`.

```{webr}

# Encadenar funciones con el operador %>% (pipe)
mtcars %>%
  select(mpg, hp, wt) %>%
  filter(hp > 100) %>%
  head()

```

## Fin