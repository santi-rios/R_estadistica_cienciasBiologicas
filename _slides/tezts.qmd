---
title: "Tess"
format: 
    live-revealjs: 
        scrollable: true
webr:
    packages: 
        - networkD3
engine: knitr
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}


##

```{webr}
# Load package
library(networkD3)

# Create fake data
src <- c("A", "A", "A", "A",
        "B", "B", "C", "C", "D")
target <- c("B", "C", "D", "J",
            "E", "F", "G", "H", "I")
networkData <- data.frame(src, target)

# Plot
simpleNetwork(networkData)

```

##

```{webr}
# Load data
data(MisLinks)
data(MisNodes)

# Plot
forceNetwork(Links = MisLinks, Nodes = MisNodes,
            Source = "source", Target = "target",
            Value = "value", NodeID = "name",
            Group = "group", opacity = 0.8)

```

##

```{webr}
URL <- paste0(
        "https://cdn.rawgit.com/christophergandrud/networkD3/",
        "master/JSONdata//flare.json")

## Convert to list format
Flare <- jsonlite::fromJSON(URL, simplifyDataFrame = FALSE)

# Use subset of data for more readable diagram
Flare$children = Flare$children[1:3]

radialNetwork(List = Flare, fontSize = 10, opacity = 0.9)

```

```{webr}
diagonalNetwork(List = Flare, fontSize = 10, opacity = 0.9)
```

##

# INSERT AN IFRAME
<iframe src="https://webr.r-wasm.org/latest/" width="100%" height="400px"></iframe>


## directorios

https://es.wikipedia.org/wiki/Directorio

`getwd()`

`setwd("~/myCoolProject")

`setwd("C:/R-tutorial")`

`list.files()`

`df2 <- read.csv(file = "aneurysm.csv")`

`df5 <- readRDS(file = "C:/R-tutorial/aneurysmNEW.rds")`

`write.csv(x = df, file = "aneurysmNEW.csv", row.names = FALSE)`

since setwd() relies on an absolute file path, this makes the links break very easily, and very difficult to share your analysis with others. A simple action of moving the entire directory to a different sub-folder or to a different drive will break the links, and your script will not run. As Jenny Bryan points out, the setwd() approach makes it virtually impossible for anyone else other than the original author of the script, on his or her computer, to make the file paths work:


## Proyectos

example - let’s suppose my working directory is a folder named SurveyAnalysis1. Instead of listing out the full absolute file path, C:/Users/Martin/Documents/Analysis/SurveyAnalysis1/Data/Data1.xlsx, I can simply refer the same Excel file at the directory level when using projects, i.e. just refer to the file by Data/Data1.xlsx. The idea is that if one day I decide to move my entire SurveyAnalysis1 folder/directory to another location, or perhaps open this up on a different computer, all the file paths specified in my R scripts would still work as long as I start the session through opening the .Rproj file.

This .Rproj file can be created by going to File > New Project… in RStudio, which then becomes associated with the specified folder or directory. The mindset should then be that the directory (the whole folder and its sub-folders and contents) is stand-alone and portable, which in other words means that you shouldn’t be reading in data from or writing data to files outside the directory.



[](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects)

new R project, you should immediately create folders in the directory which will contain your R code, data files, notes, and other material relevant to your project (you can do this outside of R on your computer, or in the Files window of RStudio).

![](https://bookdown.org/ndphillips/YaRrr/images/wd_ss.png)

![](https://raw.githubusercontent.com/martinctc/blog/master/images/RPROJECT_2000dpi.png)

##

In your working directory, you will have the following:

    Data - this is the subfolder where I save any files that I need to read into R in order to do my analysis or visualisation. These could be anything from SPSS (*.sav) files, Excel / CSV files, .FST or .RDS files. The key idea is that these are source data files, and at no point should R be saving over or editing these files in order to ensure reproducibility. The reasoning is that reproducible analysis isn’t really possible if the source data file keeps getting changed by the analysis (think analysis in spreadsheets). If you do need to change the source data file, create a new version and ensure that the new file name appropriately reflects that change.
    Script - this is where I save my R scripts and RMarkdown files (files with the extension .R and .Rmd).
        Analysis - All my main analysis R scripts are saved here, which I think it is for most intents and purposes fine if you have multiple scripts that perform different tasks saved here. I don’t personally have one project per distinct piece of analysis, as this could get out of hand when I may have 20+ different analysis that I’d like to perform on a single dataset. My (actually quite simple) rule-of-thumb for deciding whether to separate out an analysis is to imagine whether someone completely new to the project would be able to navigate and figure out what is going with this directory. As a side note - thoughtful and sensible file names help a lot!
        Functions - It is optional whether you have your custom functions saved in a separate sub-folder. I find this convenient personally because if I want to re-use a function that I remember I’ve written in a particular project, I can at a quick glance browse all the functions I’ve written for that project. Saving functions separately accompanies a workflow where you use source() to read functions into the ‘main analysis script’, rather than having it together with main analysis.
        RMarkdown files - RMarkdown files are a special case, as they work slightly differently to .R files in terms of file paths, i.e. they behave like mini projects of their own, where the default working directory is where the Rmd file is saved. To save RMarkdown files in this set up, it’s recommended that you use the {here} package and its workflow. Alternatively, you can run knitr::opts_knit$set(root.dir = "../") in your setup chunk so that the working directory is set in the root directory rather than another sub-folder where the RMarkdown file is saved (less ideal than using {here}). In my other post, I briefly discussed a directory structure for combining multiple RMarkdown files into a single long RMarkdown document](https://martinctc.github.io/blog/first-world-problems-very-long-rmarkdown-documents/).
    Output - Save all your outputs here, including plots, HTML, and data exports.
        Having this Output folder helps others identify what files are outputs of the code, as opposed to source files that were used to produce the analysis.
        What you have set up as the sub-folders don’t matter too much, as long as they’re sensible. You may decide to set up the sub-folders so that they align with the analysis rather than type of file export.
        The timed_fn() function from my package surveytoolbox (available on GitHub) helps create timestamps for file names, which I use often to ensure that I don’t lose work when I am iterating analysis.

This directory structure ‘template’ should provide a good starting point for organising projects if a project workflow is new to you. However, whilst having consistency is great, different projects will have different needs, and therefore one should always think about what is needed and what will happen when setting up the working directory structure, and adapt appropriately.

## rmarkdown

Quarto es un entorno de trabajo que facilita estructurar un documento que reúne las salidas, tanto gráficas como de texto, junto con el código que las genera y los comentarios e interpretaciones redactados por el usuario. Este entorno se basa en el lenguaje Markdown y puede usarse desde RStudio.

Componentes del Documento Quarto

Los documentos de Quarto pueden estar conformados por tres tipos de contenidos:

    Encabezado en formato YAML
    Fragmentos de código
    Texto

Encabezado YAML

El encabezado en formato YAML (YAML Ain’t Markup Language) aparece al principio del documento de Quarto. Aunque es optativo, bajo ciertas circunstancias se genera automáticamente durante el proceso de renderizado que genera el archivo de salida (cf. sección F.2.1). Tanto el inicio como la finalización del encabezado YAML están definidos por tres guiones aislados en una línea. La información contenida dentro de esas dos líneas constituye el encabezado YAML. Allí suelen incluirse metadatos (tales como título, autor y fecha) y opciones generales que determinan la edición y las salidas (tales como el modo de edición predeterminado, el formato de salida y el tamaño de las imágenes). Cada uno de tales elementos ocupa una línea; para su definición se usa la sintaxis clave: valor.

---
title: "RESPUESTA FISIOLÓGICA"
author: "José Antonio Pérez"
date: 2023-09-20
format: html
---

En el anterior encabezado YAML, la primera palabra de cada línea es una clave, mientras que la información que aparece a continuación de los dos puntos es su valor. Así, por ejemplo, title es una clave, cuyo valor para el presente ejemplo es "RESPUESTA FISIOLÓGICA".

Para definir el formato de salida, en lugar del valor html, pueden usarse los valores pdf o docx para generar documentos en pdf o Word, respectivamente.

Fragmentos de código

El documento Quarto puede incluir tantos fragmentos de código como sean necesarios. Cada fragmento de código debe iniciarse con tres comillas invertidas seguidas de la letra r dentro de llaves38. El fragmento finaliza con tres comillas invertidas aisladas en una línea. Todas las instrucciones incorporadas entre la línea de inicio y la de finalización constituyen un bloque de código o fragmento de código (code chunk). Los fragmentos de código tienen las mismas características que el código de los scripts clásicos de R.

```{{r}}
x <- c(4.1, 6.5, 4.8, 3.5, 2.7, 3.0, 5.9, 2.3)
var(x)
```

Texto

El texto es el tercer tipo de contenido de los documentos Quarto. Cualquier contenido que no esté dentro de un fragmento de código ni forme parte del encabezado YAML se toma como texto y aparecerá como tal en el documento de salida.

Instala Quarto Primero!

    Descarga Quarto desde el sitio web oficial: https://quarto.org/docs/get-started/
    Sigue las instrucciones de instalación específicas para tu sistema operativo (Windows, macOS, o Linux).
    No te compliques y utiliza la configuración por default
