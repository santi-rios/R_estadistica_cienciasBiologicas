---
title: "Ejercicio pandas"
author:
  - name: "Mtro. Santiago Ríos"
    email: santiagoboo99@gmail.com
    affiliation: 
      - name: Cursos Or ca
        city: CDMX
        url: orcaasesina.com
format: live-html 
pyodide:
  packages:
    - pandas
    - seaborn
    - palmerpenguins
    - matplotlib
resources:
  - datos
toc: true
sidebar: false
---

En esta sección pondrás en práctica conceptos de manipulación de datos en Python. El objetivo es que puedas aplicar las funciones de `pandas` a un conjunto de datos real. Esto será importante para las próximas secciones, donde aprenderás a realizar análisis estadísticos y visualizaciones de datos. Sin embargo, antes de que veamos estos temas, es importante que te sientas cómodo trabajando con `pandas`, manejando datos y realizando transformaciones básicas.

Vamos a simular el flujo de trabajo que seguirías en un proyecto de análisis de datos en Python.

## Cargar librerías y datos

Para este ejercicio, vamos a trabajar con 3 librerías: `pandas` para manipulación de datos, `palmerpenguins` para cargar los datos y `seaborn` para visualización. En este caso, vamos a trabajar con el conjunto de datos `pinguinos` que contiene medidas de tamaño de pingüinos adultos en busca de comida cerca de la estación Palmer en la Antártica.

![](https://allisonhorst.github.io/palmerpenguins/logo.png)

**Carga las librerías y los datos**

```{pyodide}
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

pinguinos = pd.read_csv('datos/penguins.csv')

pinguinos.info()
```


from os import listdir
import pandas as pd
print(listdir("datos"))
pd.read_csv('datos/penguins.csv')


El conjunto de datos pinguinos contiene las siguientes variables:

| Variable Name   |  Description
|:----------------|:--------------------------------
| `species` | Especie de pingüino
| `island` | Isla donde se encontró el pingüino
| `bill_length_mm` | Longitud del pico en milímetros
| `bill_depth_mm` | Profundidad del pico en milímetros
| `flipper_length_mm` | Longitud de la aleta en milímetros
| `body_mass_g` | Masa corporal en gramos
| `sex` | Sexo del pingüino
| `year` | Año de la medición

![](https://allisonhorst.github.io/palmerpenguins/reference/figures/culmen_depth.png)

***Inspecciona los datos con `head()`***

```{pyodide}
pinguinos.head()
```

> ¿Cuántas especies de pingüinos hay en el conjunto de datos?

```{pyodide}
pinguinos['species'].unique()
```

> ¿Cuántos pingüinos de cada sexo hay?

```{pyodide}
pinguinos['sex'].value_counts()
```

> En nuestros datos, la variable `year` está registrada como una variable numérica (`int64`). Aunque esto no está mal, queremos recodificarla a una variable de tipo `category`.

```{pyodide}
pinguinos['year'] = pinguinos['year'].astype('category')
pinguinos.info()
```

> En el siguiente ejercicio, elimina todas las observaciones con `NA` (observaciones faltantes) en nuestro dataset para que en el futuro evitemos errores. Primero explora cuántos datos faltantes hay en cada variable.

```{pyodide}
pinguinos.isna().sum()
```

```{pyodide}
pinguinos_na = pinguinos.dropna()
pinguinos_na.isna().sum()
```

> Ahora, vamos a realizar lo siguiente: pasa todas las variables que miden longitud y masa a centímetros y kilogramos, respectivamente. Recuerda que 1 milímetro es igual a 0.1 centímetros y 1 gramo es igual a 0.001 kilogramos.

```{pyodide}
pinguinos_limpio = pinguinos_na.copy()
pinguinos_limpio['bill_length_cm'] = pinguinos_limpio['bill_length_mm'] * 0.1
pinguinos_limpio['bill_depth_cm'] = pinguinos_limpio['bill_depth_mm'] * 0.1
pinguinos_limpio['flipper_length_cm'] = pinguinos_limpio['flipper_length_mm'] * 0.1
pinguinos_limpio['body_mass_kg'] = pinguinos_limpio['body_mass_g'] * 0.001

pinguinos_limpio.head()
```

> Ahora, calcula el promedio y desviación estándar de estas nuevas variables.

```{pyodide}
columnas_metricas = ['bill_length_cm', 'bill_depth_cm', 'flipper_length_cm', 'body_mass_kg']
pinguinos_resumen = pinguinos_limpio[columnas_metricas].agg(['mean', 'std'])
print(pinguinos_resumen)
```

> Ahora, vamos a construir un histograma de las masas corporales de los pingüinos en cada especie. En el próximo módulo veremos cómo construir estos gráficos a detalle.

```{pyodide}
sns.histplot(data=pinguinos_limpio, x="body_mass_kg", hue="species", multiple="stack")
plt.show()
```
