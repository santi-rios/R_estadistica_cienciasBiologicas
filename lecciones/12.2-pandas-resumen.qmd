---
title: "Resumen Funciones para Manejo de Datos en Python"
subtitle: "pandas"
author:
  - name: "Mtro. Santiago Ríos"
    email: santiagoboo99@gmail.com
    affiliation: 
      - name: Cursos Or ca
        city: CDMX
        url: orcaasesina.com
format: live-html 
pyodide:
  packages:
    - pandas
    - seaborn
    - numpy
toc: true
sidebar: false
---

# Introducción

Antes de continuar con el análisis estadístico de datos, es importante tener una comprensión sólida de cómo manipular y limpiar los datos. En Python, la librería `pandas` es esencial para este propósito. `pandas` proporciona estructuras de datos y herramientas de análisis de datos de alto rendimiento y fáciles de usar. Facilita la selección, filtrado, ordenación, agrupación y resumen de datos. En este resumen, revisaremos las funciones más comunes de `pandas` para manipular y limpiar datos en Python.

## pandas

![pandas](https://pandas.pydata.org/static/img/pandas.svg)

Para este resumen, utilizaremos el conjunto de datos `iris`, que contiene medidas de flores. Este conjunto de datos se puede cargar fácilmente con la librería `seaborn`. Los datos provienen de un estudio sobre la variabilidad de las flores de iris (Ronald Fisher, 1936) y contienen cuatro medidas (longitud y ancho del sépalo y pétalo) de tres especies de iris (setosa, versicolor y virginica).

Primero, cargaremos las librerías `pandas` y `seaborn`, y el conjunto de datos `iris`.

```{pyodide}
import pandas as pd
import seaborn as sns
import numpy as np

# Cargar un conjunto de datos de ejemplo
iris = sns.load_dataset("iris")
```

### Sintáxis básica en pandas

En pandas, la mayoría de las operaciones se realizan llamando a métodos en un objeto DataFrame. Por ejemplo, `df.method()`. Esto permite encadenar operaciones de una manera legible.

```{pyodide}
# Filtrar filas donde species es igual a "setosa"
iris[iris['species'] == 'setosa'].head()
```

### Inspeccionar Datos

#### `info()`

- El método `info()` de `pandas` proporciona una descripción concisa de un DataFrame.
- Muestra el tipo de datos de cada columna, los valores no nulos y el uso de memoria.

```{pyodide}
# Inspeccionar los datos con info()
iris.info()
```

#### `head()` y `tail()`
- `head()` muestra las primeras 5 filas.
- `tail()` muestra las últimas 5 filas.

```{pyodide}
iris.head()
```

#### `sort_values()`

- El método `sort_values()` ordena las filas de un DataFrame por los valores de una o más columnas.
- Por ejemplo, para ordenar `iris` por la columna `sepal_length` de menor a mayor.

```{pyodide}
# Ordenar filas por valores de una columna (bajo a alto)
iris.sort_values(by='sepal_length').head()
```

### Limpiar Datos

#### Limpiar nombres de columnas

- Es una buena práctica tener nombres de columna consistentes (p. ej., minúsculas, sin espacios). Se puede hacer manualmente o con librerías como `pyjanitor`.

```{pyodide}
# Limpiar los nombres de las columnas manualmente
iris_clean = iris.copy()
iris_clean.columns = iris_clean.columns.str.replace('_', ' ').str.title().str.replace(' ', '')
iris_clean.columns = [col.lower() for col in iris_clean.columns]
iris_clean.head()
```

#### `rename()`
- El método `rename()` cambia el nombre de las columnas de un DataFrame.

```{pyodide}
# Cambiar el nombre de la columna 'species' a 'especie'
iris.rename(columns={'species': 'especie'}).head()
```

### Filtrar Datos

#### Seleccionar columnas

- Se pueden seleccionar columnas usando corchetes `[]`.

```{pyodide}
# Seleccionar columnas por nombre
iris[['sepal_width', 'petal_length', 'species']].head()
```

- Para quitar una columna, se puede usar el método `drop()`.

```{pyodide}
# Quitar una columna
iris.drop(columns='species').head()
```

***Funciones de ayuda***

- `filter()`: selecciona columnas basadas en los nombres.

```{pyodide}
# Seleccionar columnas cuyos nombres comienzan con 'sepal'
iris.filter(like='sepal').head()

# Seleccionar columnas cuyos nombres terminan con 'length'
iris.filter(like='length').head()

# Seleccionar columnas que contienen 'width'
iris.filter(like='width').head()
```

#### Seleccionar filas u observaciones

- El método más común para filtrar filas es el indexado booleano.

```{pyodide}
# Filtrar filas por criterios lógicos
iris[iris['sepal_length'] > 7]
```

Recuerda los ***Operadores lógicos*** que podemos usar en pandas:

- `==`: igual a
```{pyodide}
iris[iris['species'] == 'setosa'].head()
```

- `!=`: no igual a
```{pyodide}
iris[iris['species'] != 'setosa'].head()
```

- `>`, `<`, `>=`, `<=`
```{pyodide}
iris[iris['sepal_length'] > 7]
```

- `.isin()`: pertenece a un conjunto
```{pyodide}
iris[iris['species'].isin(['setosa', 'versicolor'])].head()
```

- `&`: y lógico, `|`: o lógico
```{pyodide}
iris[(iris['sepal_length'] > 7) & (iris['species'] == 'virginica')]
```

- `.isna()` / `.isnull()`: es NA
```{pyodide}
iris[iris['sepal_length'].isna()]
```

*Otras funciones* útiles para filtrar datos:

- `drop_duplicates()`: Remueve filas duplicadas.
```{pyodide}
iris.drop_duplicates().shape
```

- `sample()`: Selecciona una fracción o un número de filas al azar.
```{pyodide}
# Seleccionar una fracción de filas al azar (50%)
iris.sample(frac=0.5).head()

# Seleccionar 10 filas al azar
iris.sample(n=10)
```

- `nlargest()`: Selecciona las n entradas más altas.
```{pyodide}
# Seleccionar las 2 filas con los valores más altos de sepal_length
iris.nlargest(2, 'sepal_length')
```

### Resumiendo Datos

- El método `agg()` (o `aggregate()`) resume datos.

```{pyodide}
# Resumir datos
iris.agg({'sepal_length': ['mean', 'std'], 'sepal_width': ['mean', 'std']})
```

- `value_counts()`: Cuenta el número de valores únicos.
```{pyodide}
iris['species'].value_counts()
```

### Agrupando Datos

- `groupby()`: Agrupa datos por los valores en una o más columnas.

```{pyodide}
# Agrupar por especie y calcular el tamaño de cada grupo
iris.groupby('species').size()

# Agrupar por especie y calcular la media de las otras columnas
iris.groupby('species').mean()
```

### Crear Nuevas Variables
- Se pueden crear nuevas columnas directamente o con el método `assign()`.

```{pyodide}
# Calcular y añadir una columna nueva
iris.assign(sepal_sum = iris['sepal_length'] + iris['sepal_width']).head()
```

- `np.select()`: Reemplaza valores basados en condiciones (similar a `case_when`).
```{pyodide}
# Reemplazar valores basados en condiciones
conditions = [
    iris['species'] == 'setosa',
    iris['species'] == 'versicolor',
    iris['species'] == 'virginica'
]
choices = ['Iris setosa', 'Iris versicolor', 'Iris virginica']
iris.assign(nombre_cientifico = np.select(conditions, choices, default='Other')).head()
```

### Cambiar tipo de datos

- Podemos usar `astype()` para cambiar el tipo de datos de una columna.

```{pyodide}
# Cambiar el tipo de datos de una columna
iris['sepal_length'].astype('int64').head()
```

## Tidying Data con pandas

### Cambiar la Forma de los Datos
- La forma de los datos es fundamental. Los datos "tidy" tienen una observación por fila y una variable por columna.
- `pandas` proporciona herramientas para cambiar la forma de los datos.

#### De Ancho a Largo: `melt()`
- `melt()` se usa para transformar un DataFrame de formato ancho a formato largo. Es el análogo a `pivot_longer` de `tidyr`.

```{pyodide}
# Crear un dataframe ancho de ejemplo
wide_df = iris.head().reset_index().rename(columns={'index':'observation'})
print("Forma Ancha:")
print(wide_df)

# Usar melt para pasar a formato largo
long_df = wide_df.melt(id_vars=['observation', 'species'], 
                       value_vars=['sepal_length', 'sepal_width', 'petal_length', 'petal_width'],
                       var_name='medida', 
                       value_name='valor_cm')

print("\nForma Larga:")
print(long_df)
```

#### De Largo a Ancho: `pivot()`
- `pivot()` se usa para transformar un DataFrame de formato largo a formato ancho. Es el análogo a `pivot_wider` de `tidyr`.

```{pyodide}
# Usar pivot para volver al formato ancho
wide_again_df = long_df.pivot(index=['observation', 'species'], 
                              columns='medida', 
                              values='valor_cm').reset_index()

print("\nDe vuelta a Forma Ancha:")
print(wide_again_df)
```
