---
title: "Empieza a programar con R/python"
subtitle: "Karel, el robot programador"
author: "Cursos Orca"
format: 
    live-html: 
        toc: true
        # theme: simple
        # scrollable: true
        toc-depth: 2
        toc-title: Contenido de la Lección
        # progress: true
        # slide-number: true
        lang: es
        # logo: "https://cran.r-project.org/Rlogo.svg"
webr:
    packages: 
        - karel
pyodide:
  packages:
    - matplotlib
    - ipython
    - https://santi-rios.github.io/pykarel_web/pykarel_web-0.2.6-py3-none-any.whl
engine: knitr
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

En esta lección veremos algunos conceptos de programación un tanto complejos. Dominar estos conceptos es un proceso que tarda tiempo y experiencia con un lenguaje de programación. En este curso, no esperamos que domines estos conceptos de inmediato, pero es recomendable que los conozcas para que puedas aplicarlos en el futuro.


```{webr}
#| autorun: true
#| include: false

library(karel)

# Crear un entorno para llevar el conteo de pasos
.karel_env <- new.env(parent = emptyenv())
.karel_env$step_counter <- 1

# Sobrescribir generar_mundo para reiniciar el contador
generar_mundo <- function(mundo) {
  karel::generar_mundo(mundo)
  .karel_env$step_counter <- 1
}

# Funciones auxiliares que generan imágenes estáticas después de cada acción
avanzar <- function() {
  karel::avanzar()
  karel:::plot_static_world(.karel_env$step_counter)
  .karel_env$step_counter <<- .karel_env$step_counter + 1
}

girar_izquierda <- function() {
  karel::girar_izquierda()
  karel:::plot_static_world(.karel_env$step_counter)
  .karel_env$step_counter <<- .karel_env$step_counter + 1
}

juntar_coso <- function() {
  karel::juntar_coso()
  karel:::plot_static_world(.karel_env$step_counter)
  .karel_env$step_counter <<- .karel_env$step_counter + 1
}

poner_coso <- function() {
  karel::poner_coso()
  karel:::plot_static_world(.karel_env$step_counter)
  .karel_env$step_counter <<- .karel_env$step_counter + 1
}

# Sobrescribir ejecutar_acciones para que no haga nada
ejecutar_acciones <- function() {
  invisible()
}

# Función girar_derecha optimizada para una sola imagen
girar_derecha <- function() {
  karel::girar_izquierda()
  karel::girar_izquierda()
  karel::girar_izquierda()
  karel:::plot_static_world(.karel_env$step_counter)
  .karel_env$step_counter <<- .karel_env$step_counter + 1
}

```

## Conceptos básicos de programación

-   Programación: es la actividad por la cual las personas entregan a una computadora un conjunto de instrucciones que, al ejecutarlas, permite a la computadora resolver un problema.
-   Los conjuntos de instrucciones que las computadoras reciben se denominan programas.
-   Para darle instrucciones a una computadora, necesitamos utilizar un lenguaje de programación.
-   En esta lección, aprenderemos conceptos básicos de programación para desarrollar el pensamiento abstracto y lógico necesario para comunicarnos eficientemente con la computadora.
-   Para comprender algunas ideas básicas de programación, utilizaremos a Karel, un robot que se mueve por mundos rectangulares.
-   En esta primera lección, el objetivo no es aprender R/python, sino comprender conceptos básicos de programación y cómo comenzar a pensar como un programador.
-   Las dos habilidades que deberás desarrollar son:
    -   **Diseñar algoritmos**: desarrollar o pensar un algoritmo que resuelva un problema.
    -   **Codificación**: escribir el algoritmo en un lenguaje de programación para que la computadora pueda entenderlo y ejecutarlo.

## Qué es Karel

-   Karel es un robot que vive en un mundo de cuadrículas diseñado para enseñar conceptos básicos de programación.
-   Karel recibe instrucciones en español para moverse por el mundo y realizar tareas específicas.
-   Gracias a que observarás cómo Karel se mueve y realiza tareas, podrás comprender mejor los conceptos de programación, así como los errores que pueden surgir al programar.
-   Los errores de programación se llaman *bugs*, palabra que viene de un error en una computadora en 1947 debido a una polilla.
-   Le daremos a Karel instrucciones para que resuelva un problema (algoritmo). Cada instrucción del algoritmo modifica el mundo (*entorno*) de alguna manera y se denomina acción.

## Cargar el paquete Karel

-   Para que R/python pueda usar Karel, primero debemos cargar el paquete `karel`.
-   Esto pemrite que R/python reconozca las funciones y objetos que contiene el paquete. Esto se verá más adelante a detalle.
    -   En este caso, el paquete `karel` contiene las funciones que le permiten a Karel moverse por el mundo y realizar tareas específicas.
-   Por el momento no veras ningún output al cargar el paquete, pero es importante que corras el código para poder usar Karel en la lección.

::: {.panel-tabset group="language"}
## R

-   En R, importamos paquetes con la función `library()`.
-   En este caso, el paquete se llama `karel` y lo importamos con el siguiente código:

```{webr}
library(karel)
```

## python

-   En python, importamos paquetes con la palabra clave `import`.

```{pyodide}
from pykarel_web import Karel
```

:::

-   En este caso, el paquete se llama [pykarel_web](https://github.com/santi-rios/pykarel_web) y lo importamos con el siguiente código:
    -   Este paquete es una versión de Karel que construí para python y se puede usar en el navegador.
    -   Revisa el repositorio en [pykarel_web](https://github.com/santi-rios/pykarel_web) para más información, ejemplos y documentación.

## Generar un mundo

-   Ahora que hemos cargado el paquete, podemos crear un mundo para Karel.

::: {.panel-tabset group="language"}
## R

-   Esto se hace con la función `generar_mundo()`.
-   Dentro de los paréntesis, debes especificar el nombre del mundo que deseas crear.
-   El paquete Karel viene con varios mundos predefinidos que puedes usar. Por ejemplo, `mundo001`.
-   Corre el siguiente código para generar el mundo llamado `mundo001`.

```{webr}
library(karel)
generar_mundo("mundo001")
```

-   Una vez que hayas ejecutado el código, verás una ventana emergente con el mundo de Karel.
-   Observa que el mundo está formado por cuadrículas y Karel se encuentra en una posición específica.
-   Las calles son las fila del mundo rectangular, es decir, las calles corren horizontalmente.
-   Las avenidas corren verticalmente (columnas).
-   La intersección entre una calle y una avenida es llamada celda y se puede identificar por los números fuera del recuadro.
-   Karel siempre mira hacia una de las cuatro direcciones posibles: este, norte, oeste o sur.
-   Los bordes negros representan paredes que Karel no debe cruzar.
-   El cubo morado se llama en el programa un `coso`. Estos `cosos` pueden ser tomados por Karel y guardarlos en su mochila. En el mundo que acabamos de crear, el coso se encuentra en la celda (2, 1)

## python

-   Esto se hace con la función `karel = Karel()`.
    -   Dentro de los paréntesis, debes especificar el nombre del mundo que deseas crear, en este caso, `karel = Karel(mundo="laberinto")`
-   La función `karel.ejecutar_acciones()` ejecuta las acciones, en este caso, crear el mundo.
-   Corre el siguiente código para generar el mundo llamado `laberinto`.

```{pyodide}
from pykarel_web import Karel
karel = Karel(mundo="laberinto")
karel.ejecutar_acciones()
```

-   Una vez que hayas ejecutado el código, verás una ventana emergente con el mundo de Karel.
-   Observa que el mundo está formado por cuadrículas y Karel se encuentra en una posición específica y una dirección específica.
-   Los bordes negros representan paredes que Karel no puede cruzar.
-   La esfera roja se llama en el programa un `coso`. Estos `cosos` pueden ser tomados por Karel y guardarlos en su mochila.
:::

## Acciones (funciones) de Karel

-   Como vimos previamente, una función en R/python se escribe igual que las acciones de Karel.
-   Piensa en la función `print()`.
    -   Recuerda que las funciones reciben argumentos dentro de los paréntesis, como `print("Hola, mundo!")`.

Karel puede realizar las siguientes acciones (funciones):

|   | R | Python | NOTA |   |
|----------------------|------------|------------|-----------------|------------|
| avanzar un espacio | avanzar() | karel.avanzar() | Karel solo avanza si no hay una pared que se lo impida |  |
| rotar 90º hacia su izquierda | girar_izquierda() | karel.girar_izquierda() | Karel solo sabe girar a la izquierda, NO a la derecha |  |
| levanta el coso que hay en su celda y lo guarda en su mochila | juntar_coso() | karel.juntar_coso() | Debe haber al menos un coso en la celda para que Karel pueda realizar esta acción. |  |
| toma un coso de su mochila y lo coloca en la celda | poner_coso() | karel.poner_coso() | Debe haber al menos un coso en la mochila de Karel para que pueda realizar esta acción |  |
| después de decirle a Karel que queremos que haga, esta función le dice a Karel que ejecute las instrucciones | ejecutar_acciones() | karel.ejecutar_acciones() |  |  |

: Funciones de Karel {#tbl-funcioneskarel}

Veamos un primer ejemplo.

::::: {.panel-tabset group="language"}
## R

Vamos a pedirle a Karel que avance, junte el coso y vuelva a avanzar:

```{webr}
library(karel)

generar_mundo("mundo001")
avanzar()
juntar_coso()
avanzar()
ejecutar_acciones()

```

::: callout-warning
Qué pasa si intentas avanzar cuando hay una pared enfrente de Karel? Intenta hacerlo y observa el resultado.

```{webr}
library(karel)
generar_mundo("mundo001")
avanzar()
juntar_coso()
avanzar()
avanzar()
ejecutar_acciones()

```
:::

## python

Vamos a pedirle a Karel que junte el coso, gire a la izquierda y vuelva a avanzar:

```{pyodide}
from pykarel_web import Karel

karel = Karel(mundo="laberinto")
karel.juntar_coso()
karel.girar_izquierda()
karel.avanzar()
karel.ejecutar_acciones()

```

::: {.panel-tabset group="language"}
Qué pasa si intentas avanzar cuando hay una pared enfrente de Karel? Intenta hacerlo y observa el resultado.

```{pyodide}
from pykarel_web import Karel

karel = Karel(mundo="laberinto")
karel.avanzar()
karel.ejecutar_acciones()
```
:::
:::::

## Ejercicio 2

::: {.panel-tabset group="language"}
## R

-   Ahora queremos que Karel junte el coso, lo coloque en la Calle 2 y Avenida 5 y finalmente avance a la Calle 2 y Avenida 6, como en la imagen de abajo:

![](https://ropensci.github.io/karel/articles/15.png)

-   Los primeros tres comandos que necesitamos en el programa son los mismos de antes, pero luego Karel tiene que girar a su izquierda para poder bordear la pared y avanzar un lugar, quedando de cara al norte:

![](https://ropensci.github.io/karel/articles/16.png)

-   Ahora necesitamos que Karel gire a la derecha, para que quede mirando al este.
-   Sin embargo, **Karel sólo sabe girar a la izquierda**, no existe ninguna función girar_derecha()
-   Para girar a la derecha, se puede lograr el mismo efecto girando tres veces a la izquierda. Luego, sólo resta que avance, coloque el coso y vuelva a avanzar una vez:

```{webr}
library(karel)

generar_mundo("mundo001")
avanzar()
juntar_coso()
avanzar()
girar_izquierda()
avanzar()
girar_izquierda()
girar_izquierda()
girar_izquierda()
avanzar()
avanzar()
poner_coso()
avanzar()
ejecutar_acciones()

```

## python

-   Ahora queremos que Karel junte el coso y avance hasta el siguiente coso.
-   Los primeros comandos que necesitamos en el programa son los mismos de antes, pero luego Karel tiene que girar a su derecha para poder seguir avanzando hacia el este.
-   Sin embargo, **Karel sólo sabe girar a la izquierda**, no existe ninguna función girar_derecha()
-   Para girar a la derecha, se puede lograr el mismo efecto girando tres veces a la izquierda. Luego, sólo resta que avance:

```{pyodide}

from pykarel_web import Karel

karel = Karel(mundo="laberinto")
karel.juntar_coso()
karel.girar_izquierda()
karel.avanzar()
karel.avanzar()
karel.girar_izquierda()
karel.girar_izquierda()
karel.girar_izquierda()
karel.avanzar()
karel.avanzar()
karel.ejecutar_acciones()
```
:::

Como ves, el código se vuelve un poco más largo y repetitivo. Esto es normal al principio, pero a medida que aprendas más sobre programación, podrás escribir código más eficiente y legible. 

# Descomponer un problema en pasos

![](https://www.origoeducation.com/wp-content/uploads/2019/10/Decomposing-Situations-1.jpg)

-   Para solucionar el problema (**algorítmo**) pasado, es más sencillo dividir el problema en partes más pequeñas (**subalgoritmos**), lo que se conoce como **descomposición algorítmica o modular**.
    -   Un subalgoritmo se escribe una vez y es reutilizado por cualquier algoritmo que lo necesite.
    -   Adicionalmente, si un problema implica tareas que se repiten varias veces, esas tareas pueden definirse como un subalgoritmo separado, escrito una vez pero usado en múltiples lugares.
-   En programación, existen varios términos para diferentes tipos de subalgoritmos, como *subrutinas*, *funciones*, *procedimientos*, *métodos* y *subprogramas*.
-   En este tutorial, nos referiremos a los subalgoritmos como funciones.
    -   Muchas de las funciones que usamos en R son funciones predefinidas, como `print()`, `mean()`, `sum()`, etc.
    -   Sin embargo, también podemos crear nuestras propias funciones para resolver problemas específicos.

## Función Girar Derecha

-   En la sección anterior Karel necesitaba doblar a la derecha y lo logramos indicándole que gire tres veces a la izquierda.
-   Vamos a crear una función que nos permita girar a la derecha para no tener que escribir `girar_izquierda` 3 veces cada vez que queramos girar a la izquierda.


::: {.panel-tabset group="language"}
## R

-   En R, las funciones se crean con la palabra clave `function`. Observa el siguiente código que indica la estructura básica de una función en R:

``` r
nombre_funcion_nueva <- function() {
    # Código de la función
}
```

-   Ahora, para crear la función `girar_derecha()`, necesitamos que Karel gire tres veces a la izquierda.
-   Esta función se puede definir de la siguiente manera:
  - Observa que la función `girar_derecha()` no recibe ningún argumento, ya que no necesita información adicional para realizar su tarea.

``` r
girar_derecha <- function() {
  girar_izquierda()
  girar_izquierda()
  girar_izquierda()
}
```

-   Observa que usamos el operador de asignación `<-` para asociar a ese nombre la definición de una función, similar a como lo hacemos con las variables.
-   Ahora, vamos a usar la función `girar_derecha()` en el programa de Karel para que pueda girar a la derecha.

```{webr}
generar_mundo("mundo001")
avanzar()
juntar_coso()
avanzar()
girar_izquierda()
avanzar()
# Ahora Karel puede girar a la derecha
girar_derecha()
avanzar()
avanzar()
poner_coso()
avanzar()
ejecutar_acciones()
```

## Python

-   En python, las funciones se crean con la palabra clave `def`. Observa el siguiente código que indica la estructura básica de una función en python:

``` python
def nombre_funcion_nueva():
    # Código de la función
```

-   Ahora, para crear la función `gira_derecha()`, necesitamos que Karel gire tres veces a la izquierda.

-   Vamos a crearla:

```{pyodide}

def gira_derecha():
    karel.girar_izquierda()
    karel.girar_izquierda()
    karel.girar_izquierda()
```

-   Nota que tienes que ejecutar el código para que la función `gira_derecha()` esté disponible en tu sesión de python.
-   Ahora, vamos a usar la función `gira_derecha()` en el programa de Karel para que pueda girar a la derecha.

```{pyodide}
from pykarel_web import Karel

karel = Karel(mundo="laberinto")
karel.juntar_coso()
karel.girar_izquierda()
karel.avanzar()
karel.avanzar()

# Ahora Karel puede girar a la derecha
karel.girar_derecha()

karel.avanzar()
karel.avanzar()
karel.ejecutar_acciones()
```

:::

## Ejercicio - Función Dar Vuelta

-   Crea una función que le permita dar una vuelta de 180º a Karel (mirar hacia la dirección contraria).
-   Corre el código de Karel y verifica que Karel puede girar 180º. Si la función está bien escrita, Karel debería regresar a su posición original.
-   Llama la función `dar_vuelta()`.
-   Si tienes problemas, puedes ver la solución.

:::: {.panel-tabset group="language"}

## R

-   Ahora, vamos a usar la función `dar_vuelta()` en el programa de Karel para que pueda girar 180 grados.
-   Si tienes problemas, puedes ver la solución a continuación.

::: {.callout collapse="true"}
``` {webr}
#| exercise: karel_dar_vuelta_r

dar_vuelta <- function() {
  ______
}

generar_mundo("mundo001")
avanzar()
avanzar()
# llamar a la función dar vuelta
dar_vuelta()
avanzar()
avanzar()
ejecutar_acciones()
```

:::

::: {.solution exercise="karel_dar_vuelta_r"}

## Solución:

``` r
#| code-fold: true
#| code-summary: "Mostrar Respuesta"
dar_vuelta <- function() {
  girar_izquierda()
  girar_izquierda()
}
```

:::

## Python

-   Ahora, vamos a usar la función `dar_vuelta()` en el programa de Karel para que pueda girar 180 grados.
-   Si tienes problemas, puedes ver la solución a continuación.

::: {.callout collapse="true"}
``` {pyodide}
#| exercise: karel_dar_vuelta_py

from pykarel_web import Karel

def dar_vuelta():
    _______

karel = Karel(mundo="laberinto")
karel.girar_izquierda()
karel.avanzar()
karel.avanzar()
# llamar a la función dar vuelta
dar_vuelta()
karel.avanzar()
karel.avanzar()
karel.ejecutar_acciones()
```

:::

::: {.solution exercise="karel_dar_vuelta_py"}

## Solución:

``` python
def dar_vuelta():
    karel.girar_izquierda()
    karel.girar_izquierda()
```

:::

::::


::: {.callout-note}
## Funciones integradas

-   La mayoría de las veces, utilizamos funciones en R/python predefinidas para realizar tareas específicas.
-   Por ejemplo, la función `print()` en R/python imprime un mensaje en la consola.
-   Por esta razón, la mayoría de las veces no necesitamos crear nuestras propias funciones, aunque es útil saber cómo hacerlo.

:::

## Ejercicios

-   Antes de continuar con los siguientes temas, intenta resolver los siguientes ejercicios con lo que has aprendido hasta ahora.
-   Puedes resolverlos en R o python, como prefieras. Recuerda la sintaxis de cada lenguaje presentada en @tbl-funcioneskarel.
    -   Puedes utilizar las funciones de la @tbl-funcioneskarel, o crear tus propias funciones para resolver los problemas. 
-   Si tienes problemas en solucionarlos, corre el código de Karel con pocos pasos y observa lo que está haciendo bien y lo que está haciendo mal.

:::: {.panel-tabset group="language"}

## R

-   genera el mundo `mundo010` y resuelve el siguiente problema:
-   Karel debe tomar de 1 a 4 `cosos` y dejarlos en posiciones distintas.
-   No hay una respuesta correcta, la idea es que explores con Karel.

```{webr}

```


``` {r}
#| eval: false
#| code-fold: true
#| code-summary: "Posible Respuesta"
library(karel)
generar_mundo("mundo010")
avanzar()
juntar_coso()
juntar_coso()
juntar_coso()
juntar_coso()
avanzar()
poner_coso()
avanzar()
poner_coso()
avanzar()
poner_coso()
girar_izquierda()
avanzar()
poner_coso()
ejecutar_acciones()
```

``` {r}
#| eval: false
#| code-fold: true
#| code-summary: "Posible Respuesta con funciones"
library(karel)

generar_mundo("mundo010")

# Función para juntar varios cosos
juntar_varios <- function(n) {
  for (i in 1:n) juntar_coso()
}

# Función para avanzar y poner un coso
avanzar_y_poner <- function() {
  avanzar()
  poner_coso()
}

# Programa principal
avanzar()
juntar_varios(4)
avanzar_y_poner()
avanzar_y_poner()
avanzar_y_poner()
girar_izquierda()
avanzar_y_poner()

ejecutar_acciones()

```


## Python

-   genera el mundo `obstaculos` y resuelve el siguiente problema:
-   Karel debe tomar los 3 `cosos` y dejarlos en posiciones distintas.
-   No hay una respuesta correcta, la idea es que explores con Karel.

```{pyodide}

```


```{py}
#| eval: false
#| code-fold: true
#| code-summary: "Posible Respuesta"
from pykarel_web import Karel

karel = Karel(mundo="obstaculos")
karel.juntar_coso()
karel.girar_izquierda()
karel.avanzar()
karel.girar_izquierda()
karel.girar_izquierda()
karel.girar_izquierda()
karel.avanzar()
karel.avanzar()
karel.girar_izquierda()
karel.avanzar()
karel.juntar_coso()
karel.avanzar()
karel.avanzar()
karel.girar_izquierda()
karel.girar_izquierda()
karel.girar_izquierda()
karel.avanzar()
karel.juntar_coso()
karel.avanzar()
karel.poner_coso()
karel.girar_izquierda()
karel.girar_izquierda()
karel.girar_izquierda()
karel.avanzar()
karel.poner_coso()
karel.avanzar()
karel.poner_coso()
karel.ejecutar_acciones()
```


```{py}
#| eval: false
#| code-fold: true
#| code-summary: "Posible Respuesta con funciones"
from pykarel_web import Karel

karel = Karel(mundo="obstaculos")

# Función para girar a la derecha
def girar_derecha():
    for _ in range(3):
        karel.girar_izquierda()

# Función para avanzar varias veces
def avanzar_n(n):
    for _ in range(n):
        karel.avanzar()

# Función para avanzar y poner un coso
def avanzar_y_poner():
    karel.avanzar()
    karel.poner_coso()

# Programa principal
karel.juntar_coso()
karel.girar_izquierda()
karel.avanzar()
girar_derecha()
avanzar_n(2)
karel.girar_izquierda()
karel.avanzar()
karel.juntar_coso()
avanzar_n(2)
girar_derecha()
karel.avanzar()
karel.juntar_coso()
karel.avanzar()
karel.poner_coso()
girar_derecha()
karel.avanzar()
karel.poner_coso()
karel.avanzar()
karel.poner_coso()

karel.ejecutar_acciones()

```


::::
