---
title: "Datos en R y Python"
subtitle: "Introducción a Tipos de Datos"
format: 
    live-revealjs: 
        scrollable: true
webr:
    packages: 
        - ggplot2
pyodide: 
    packages: 
        - numpy
        - pandas
#         - scikit-learn
#         - matplotlib
#         - seaborn
#         - statsmodels
engine: knitr
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

## Introdución
- Antes de comenzar a trabajar con datos, es importante comprender los tipos de datos básicos y las estructuras de datos que se utilizan en cada lenguaje.
- R y Python son lenguajes de programación orientados a datos, lo que significa que están diseñados para manejar y analizar datos de manera eficiente.
- En este módulo, exploraremos los tipos de datos básicos, cómo se almacenan y manipulan los datos, y cómo se utilizan las estructuras de datos clave.

## Tipos de Datos Básicos

Tanto R como Python manejan varios tipos de datos fundamentales:

::: {.panel-tabset group="language"}

# R

- **Numéricos**: Incluyen tanto números decimales (tipo `double` en R), como `4.5`, y números enteros (tipo `integer` en R), como `4L`. Si no se especifica `L`, los números enteros también se tratan como `double` por defecto en muchos contextos.

- **Caracteres** (o cadenas de texto o *string* en inglés): Son textos que se representan con comillas, como `"algún texto"`. Nota que si pones un número entre comillas, R lo considerará como un carácter (p.ej. `"4"`).

- **NA**: Representa la ausencia de un valor.

- **Lógicos**: Son valores que pueden ser `TRUE` (verdadero) o `FALSE` (falso). Estos valores se verán más adelante. 

# Python

- **Numéricos**:
    - **Enteros (`int`)**: Números sin parte decimal, como `4`.
    - **Flotantes (`float`)**: Números con parte decimal, como `4.5`.

- **Cadenas de texto (`str`)**: Son secuencias de caracteres que se representan con comillas simples `'algún texto'` o dobles `"algún texto"`. Un número entre comillas, como `"4"`, es una cadena.

- **None**: Es un objeto especial que representa la ausencia de un valor o un valor nulo. Es similar a `NA` en R, pero su comportamiento en operaciones aritméticas es diferente (generalmente causa un error).
- **`numpy.nan` / `pandas.NA`**: Para datos numéricos faltantes que deben propagarse en cálculos (similar a `NA` en R), se usa `np.nan` (Not a Number) de la librería NumPy. Pandas también introduce `pd.NA` como un marcador de datos faltantes más general.

- **Booleanos (`bool`)**: Son valores que pueden ser `True` (verdadero) o `False` (falso).

:::

# Ejercicio de tipo de datos

Instrucciones: - Ejecuta cada bloque de código y observa la salida. - Una vez ejecutado, verifica el tipo de dato con la función `typeof()` en R, o `type()` en Python.

## Variable numérica 

::: {.panel-tabset group="language"}

# R
```{webr}

# Crear una variable numérica
numero <- 4.5

print(numero)  # Mostrar valor

typeof(numero)  # Mostrar tipo de dato

```

::: {.callout-note}
Observa que el resultado de `typeof()` es `double`, que es el tipo de dato que R utiliza para números decimales.
:::

# Python
```{pyodide}
# Crear una variable numérica (flotante)
numero_py = 4.5

print(numero_py)  # Mostrar valor

type(numero_py)  # Mostrar tipo de dato
```

::: {.callout-note}
Observa que el resultado de `type()` es `<class 'float'>`, que es el tipo de dato que Python utiliza para números decimales.
:::

:::

## Variable numérica entera

::: {.panel-tabset group="language"}

# R
```{webr}

# Crear una variable entera
# Para esto, se agrega la letra "L" al final del número
entero <- 4L

print(entero)

typeof(entero)

```

::: {.callout-note}
En este caso, el resultado de `typeof()` es `integer`, que es el tipo de dato que R utiliza para números enteros. En la práctica, no es necesario especificar explícitamente que un número es entero, ya que R maneja automáticamente los números enteros y decimales.
:::

# Python
```{pyodide}
# Crear una variable entera
entero_py = 4

print(entero_py)

type(entero_py)
```

::: {.callout-note}
En Python, si un número se escribe sin decimales, se considera automáticamente un entero (`<class 'int'>`). No se necesita un sufijo especial como la `L` en R.
:::

:::

## Variable de carácter

Reemplaza el guion bajo por un texto entre comillas para crear una variable de carácter. Corre el código y verifica que el tipo de dato sea correcto.

::: {.panel-tabset group="language"}

# R
```{webr}
#| exercise: datos_ex_1_r

# Crear una variable de carácter
caracter <- ______

print(caracter)

typeof(caracter)

```

```{webr}
#| exercise: datos_ex_1_r
#| check: true

# Evaluate the student's expression to get the result
if (exists("caracter") && identical(typeof(caracter), "character")) {
  list(correct = TRUE, message = "Correcto! La variable es de tipo caracter.")
} else {
  list(correct = FALSE, message = "Incorrecto. Asegúrate de asignar un texto entre comillas a la variable 'caracter'.")
}
```

::: { .solution exercise="datos_ex_1_r" }
::: { .callout-tip collapse="false"}
## Solución R

```r
caracter <- "Hola Mundo"

print(caracter)

typeof(caracter)
```

:::
:::

# Python
```{pyodide}
#| exercise: datos_ex_1_py

# Crear una variable de carácter (string)
caracter_py = ______

print(caracter_py)

type(caracter_py)
```

::: { .solution exercise="datos_ex_1_py" }
::: { .callout-tip collapse="false"}
## Solución Python
```python
caracter_py = "Hola Python"

print(caracter_py)

type(caracter_py)
```
:::
:::
*Nota: La comprobación automática de ejercicios para Python (`#| check: true`) puede requerir configuración adicional o no estar soportada de la misma manera que con `webr`.*

:::

## Colección de caracteres (Vector en R / Lista en Python)

::: {.panel-tabset group="language"}

# R
```{webr}
#| exercise: datos_ex_2_r

# Crear un vector de caracteres
vector_caracter <- c(______, ______, ______)

# Muestra los valores del vector
print(______)

# Muestra el tipo de dato del vector
print(typeof(______))


```

```{webr}
#| exercise: datos_ex_2_r
#| check: true

# Evaluate the student's expression to get the result
if (exists("vector_caracter") && identical(typeof(vector_caracter), "character") && length(vector_caracter) >= 3) {
  list(correct = TRUE, message = "Correcto! El vector es de tipo caracter y contiene elementos.")
} else {
  list(correct = FALSE, message = "Incorrecto. Asegúrate de que 'vector_caracter' sea un vector de caracteres con al menos tres elementos.")
}
```

::: { .solution exercise="datos_ex_2_r" }
::: { .callout-tip collapse="false"}
## Solución R

```r
vector_caracter <- c("Hola", "mundo", "!")

# Muestra los valores del vector
print(vector_caracter)

# Muestra el tipo de dato del vector
print(typeof(vector_caracter))
```

:::
:::

# Python
```{pyodide}
#| exercise: datos_ex_2_py

# Crear una lista de caracteres (strings)
lista_caracter_py = [______, ______, ______]

# Muestra los valores de la lista
print(______)

# Muestra el tipo de dato de la lista y de su primer elemento
print(type(______))
if ______: # Comprueba si la lista no está vacía antes de acceder al primer elemento
    print(type(______[0]))

```

::: { .solution exercise="datos_ex_2_py" }
::: { .callout-tip collapse="false"}
## Solución Python

```python
lista_caracter_py = ["Adiós", "mundo", "cruel"]

# Muestra los valores de la lista
print(lista_caracter_py)

# Muestra el tipo de dato de la lista y de su primer elemento
print(type(lista_caracter_py))
if lista_caracter_py:
    print(type(lista_caracter_py[0]))
```
:::
:::
*Nota: En Python, una lista puede contener diferentes tipos de datos. `type(lista_caracter_py)` te dará `<class 'list'>`. Para ver el tipo de los elementos, necesitas acceder a ellos individualmente, por ejemplo, `type(lista_caracter_py[0])`.*

:::

## Números como Caracteres

::: {.panel-tabset group="language"}

# R
```{webr}
# Crear una variable numérica como carácter
numero_caracter_r <- "4.5"

print(numero_caracter_r)  # Mostrar valor

typeof(numero_caracter_r)  # Mostrar tipo de dato

# Descomenta y ejecuta la siguiente línea para ver el resultado de la suma
# print(numero_caracter_r + 1)

# Solución: Convertir a numérico antes de sumar
numero_convertido_r <- as.numeric(numero_caracter_r)
print(paste("Suma correcta en R:", numero_convertido_r + 1))
```

::: {.callout-note}
Observa que si un número está entre comillas, R lo trata como un carácter. Si intentas hacer una operación aritmética con un número de carácter, obtendrás un error. Debes convertirlo a numérico primero usando `as.numeric()`.
:::

# Python
```{pyodide}
# Crear una variable numérica como string
numero_caracter_py = "4.5"

print(numero_caracter_py)  # Mostrar valor

print(type(numero_caracter_py))  # Mostrar tipo de dato

# Descomenta y ejecuta la siguiente línea para ver el error
# print(numero_caracter_py + 1)

# Solución: Convertir a flotante (o entero) antes de sumar
numero_convertido_py = float(numero_caracter_py) # o int() si fuera un entero sin decimales
print(f"Suma correcta en Python: {numero_convertido_py + 1}")

```

::: {.callout-note}
De manera similar, en Python, un número entre comillas es un string. Intentar sumarlo con un número directamente resultará en un `TypeError`. Debes convertirlo explícitamente usando `float()` para decimales o `int()` para enteros.
:::
:::

## Valores Faltantes: NA (R) vs. None / numpy.nan (Python) {.smaller}

::: {.panel-tabset group="language"}

# R
- `NA` es un valor especial en R que representa la ausencia de un valor.
- Puedes usar `NA` para indicar que un valor no está disponible o no se conoce. 
- Por ejemplo, si no tienes información sobre la edad de una persona, puedes usar `NA` para indicar que la edad es desconocida.
- Ten cuidado al trabajar con `NA`, ya que puede afectar el resultado de tus operaciones. 
- Por ejemplo, si sumas un número y `NA`, el resultado será `NA`. Esto se conoce como "propagación de NA".

```{webr}
# Suma de un número y NA
numero_r <- 4
na_r <- NA
resultado_r <- numero_r + na_r
print(paste("Resultado en R (propagación de NA):", resultado_r))
```

# Python
- Python tiene `None` para representar la ausencia de un valor de forma genérica. Sin embargo, las operaciones aritméticas con `None` típicamente resultan en un `TypeError`.
- Para un comportamiento similar a la propagación de `NA` de R en cálculos numéricos, se utiliza `numpy.nan` (Not a Number) de la librería NumPy. Pandas también utiliza `np.nan` extensamente y ofrece `pd.NA`.

```{pyodide}
import numpy as np

# Suma de un número y None (generalmente causa error)
numero_py = 4
none_py = None
try:
    resultado_none = numero_py + none_py
    print(f"Resultado con None (inesperado si ocurre): {resultado_none}")
except TypeError as e:
    print(f"Error al sumar número y None: {e}")

# Suma de un número y numpy.nan (propagación de nan)
nan_py = np.nan
resultado_nan = numero_py + nan_py
print(f"Resultado con np.nan (propagación de nan): {resultado_nan}")

# También puedes encontrar pd.NA de pandas
import pandas as pd
na_pandas = pd.NA
try:
    # La suma directa de pd.NA con un int/float puede dar pd.NA o error según la versión/contexto
    # pd.NA se comporta mejor dentro de Series/DataFrames de Pandas
    resultado_pd_na = numero_py + na_pandas 
    print(f"Resultado con pd.NA: {resultado_pd_na}")
except TypeError as e:
    print(f"Error al sumar número y pd.NA directamente: {e}")

# Ejemplo con pandas Series
serie_con_na = pd.Series([1, 2, pd.NA, 4])
print(f"Serie de Pandas con pd.NA: {serie_con_na}")
print(f"Suma de la serie (pd.NA se omite por defecto en sum()): {serie_con_na.sum()}")


```
:::

# Fin
- En la siguiente lección, veremos cómo importar y trabajar con datos.