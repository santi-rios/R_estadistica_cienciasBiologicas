---
title: "Errores Comunes en Python"
author: "Mtro. Santiago Ríos"
format: live-html 
pyodide:
  packages:
    - pandas
sidebar: false
engine: knitr
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

# Errores en Python

## Introducción a los errores en Python

- En Python, si cometes un error en tu código, el intérprete te mostrará un mensaje de error llamado "Traceback".
- Un error común para principiantes es el `SyntaxError`. Por ejemplo, si olvidamos los dos puntos `:` al final de una declaración `if`, `for`, o de una definición de función.
- Esto causa un `SyntaxError: invalid syntax`, lo que significa que Python no pudo entender la línea de código.
- Para solucionar este error, simplemente agrega los dos puntos que faltan.
- Soluciona el error en el siguiente bloque de código:

```{pyodide}
# Suma de 3 más cinco:
# def suma(a, b)
    return a + b
suma(3, 5)
```

**Solución:**

```{pyodide}
def suma(a, b):
    return a + b

suma(3, 5)
```

- En Python, los errores son comunes y pueden ocurrir por diversas razones, como errores de *sintaxis* (`SyntaxError`), errores de *lógica* (`NameError`, `TypeError`), errores de *tipografía*, problemas específicos de ciertas *librerías* (`ModuleNotFoundError`), entre otros.
- Trabajar con Python implica, inevitablemente, encontrarse con errores. Entender cómo interpretar estos errores y encontrar soluciones es una habilidad crucial.

## Entender los mensajes de error (Tracebacks)

- Un error en Python se reporta con un "Traceback", que es un informe detallado que indica dónde y por qué ocurrió el error.
- Estos mensajes están diseñados para ayudarte a identificar qué salió mal.

### 1. Identificar el tipo de error

- El Traceback termina con el tipo de error y una descripción. Ejemplos: `NameError: name 'x' is not defined`, `TypeError: unsupported operand type(s) for +: 'int' and 'str'`.
- También existen `Warning` (advertencias), que no detienen la ejecución del código, pero indican que algo podría no estar funcionando como se esperaba.

### 2. Localizar el problema

- El Traceback muestra la secuencia de llamadas a funciones que llevaron al error, indicando el archivo y el número de línea.
- Por ejemplo, en `NameError: name 'x' is not defined`, el problema es que se intentó usar una variable `x` que no ha sido creada.

```{pyodide}
# Crear una lista
y = [1, 2, 3]
print(x) # NameError: name 'x' is not defined
```

**Solución**
```{pyodide}
# Crear una lista
y = [1, 2, 3]
x = [4, 5, 6] # Crear la variable x

print(x) # Ahora no hay error
```

### 3. Revisar el Código

- Verifica la sintaxis, nombres de variables, y asegúrate de que los datos existan en el contexto adecuado. Un error de tipeo es muy común.

```{pyodide}
# Crear una lista e imprimir
x = [1, 2, 3]

# Imprimir la lista
prints(x) # NameError: name 'prints' is not defined. Corregir a print(x)
print(x)
```

### 4. Buscar Documentación

Usa las siguientes funciones:
- `help(nombre_funcion)` en la consola de Python para acceder a la documentación de una función específica.
- En entornos como Jupyter, puedes usar `?nombre_funcion` para obtener ayuda rápida.

```{pyodide}
help(print)
```

### 5. Buscar Ayuda en Línea

- Cuando te encuentras con un error, los recursos en línea son clave.
- **ChatGPT y otros asistentes de IA**: Útiles para obtener explicaciones de errores, sugerencias de código y aclarar conceptos.
- **Stack Overflow**: Una comunidad masiva de programadores. Busca tu error (incluyendo "Python" en la búsqueda) y es muy probable que alguien ya haya tenido el mismo problema.
- **Documentación Oficial de Python y de las librerías**: La fuente más confiable de información.

## Errores y soluciones comunes en Python

### `SyntaxError`

- Ocurre cuando el código no sigue las reglas de sintaxis de Python. Olvidar un paréntesis, una coma o dos puntos son causas comunes.

```{pyodide}
# Olvidar cerrar un paréntesis
# x = [1, 2, 3
# print(x)
```
**Solución**:
```{pyodide}
x = [1, 2, 3]
print(x)
```

### `IndentationError`

- Python usa la indentación (espacios al inicio de una línea) para definir bloques de código. Una indentación incorrecta causa este error.

```{pyodide}
# Indentación incorrecta
# def mi_funcion():
# return "Hola"
```
**Solución**:
```{pyodide}
def mi_funcion():
    return "Hola"
```

### `ModuleNotFoundError`

- Ocurre cuando intentas importar una librería que no ha sido instalada en tu ambiente de Python.

```{pyodide}
pd.DataFrame({
  "foo": ["az", "by", "cx", "dw"],
  "bar": [3, 14, 15, 92],
  "baz": [True, False, True, None],
})
```

**Solución**: Instala la librería usando `pip` en tu terminal: `pip install <nombre_libreria>`. Por ejemplo: `pip install pandas`. En este caso, solo tienes que importar la libreria.

```{pyodide}
import pandas as pd

pd.DataFrame({
  "foo": ["az", "by", "cx", "dw"],
  "bar": [3, 14, 15, 92],
  "baz": [True, False, True, None],
})
```