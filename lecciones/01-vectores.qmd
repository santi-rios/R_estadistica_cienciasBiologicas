---
title: "Vectores"
# subtitle: "Familiarízate con R"
author: "Cursos Orca"
format: 
    live-html: 
        toc: true
        # theme: simple
        # scrollable: true
        toc-depth: 2
        toc-title: Contenido de la Lección
        # progress: true
        # slide-number: true
        lang: es
        # logo: "https://cran.r-project.org/Rlogo.svg"
navbar: false
webr:
    packages: 
        - ggplot2
engine: knitr
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

# Vectores

Ahora vamos a ver otro tipo de objetos que almacenan más de un valor, los vectores.

## Introducción

- En `programación`, un **vector**, arreglo o lista, es una estructura que almacena una secuencia de valores.
- A diferencia de los vectores en matemáticas, los vectores en programación pueden contener diferentes tipos de datos, como números, texto, o valores lógicos.
  - Por el momento, nos enfocaremos en `vectores numéricos`. 

![Piensa en los vectores como variables con muchos valores](./figuras/vectores.jpg)

:::: {.panel-tabset group="language"}

## R

- Puedes crear un vector utilizando la función `c()` (que significa "concatenar"). 
- Ejecuta el siguiente código para crear un vector de números. 
- Solo ejecuta el código, no hay salida (ver siguiente punto).

```{webr}

# Crear un vector de números
mis_numeros <- c(1, 2, 3, 4, 5)

```

## Python

- Puedes crear una lista/vector utilizando los corchetes `[]`. Simplemente colocas los números que quieres dentro de los corchetes, separados por comas.
- Ejecuta el siguiente código para crear una lista de números. 
- Solo ejecuta el código, no hay salida (ver siguiente punto).

```{pyodide}

# Crear un vector de números
mis_numeros = [1, 2, 3, 4, 5]

```

::::


- Observa cómo al correr el código anterior, no tenemos salida.
- Esto es porque solo hemos creado el vector, pero no hemos hecho nada con él. Es decir, almacenamos el vector en la variable `mis_numeros` en la memoria, pero no mostrará nada hasta que le pidamos que haga algo con él.
- Si ya corriste el código de arriba, podemos imprimir el vector `mis_numeros` para ver su contenido. 
- Ten en cuenta que si no has corrido el código, o reinicias la página, no podrás imprimir el vector ya que no existe en la memoria de R/Python (tendrías que volver a correr el código de arriba). 

:::: {.panel-tabset group="language"}

## R

```{webr}
# Imprimir el vector
mis_numeros
```

## Python

```{pyodide}
# Imprimir el vector
mis_numeros
```

::::

## Vectores de texto

- Solo como ejemplo, ejecuta el siguiente código para crear un vector con datos no numéricos. Veremos esto en una lección posterior.
  - Observa que las palabras se encuentran entre comillas `""`. 


:::: {.panel-tabset group="language"}

## R

```{webr}

# Crear un vector de nombre de frutas
frutas <- c("manzana", "naranja", "plátano", "uva")

# imprimir el vector
frutas
```

## Python

```{pyodide}
# Crear un vector de nombre de frutas
frutas = ["manzana", "naranja", "plátano", "uva"]

# imprimir el vector
frutas
```

::::

::: {.callout-important}

***OJO***

El orden de los elementos en un vector (**Índice**) es importante. En python, comenzamos a contar desde el 0, mientras que en R comenzamos a contar desde el 1. Por ejemplo, si queremos acceder al primer elemento del vector `frutas`, en R sería `frutas[1]` y en Python sería `frutas[0]`. Observa:

::: {.columns}

::: {.column width="50%"}
### R

```{webr}
#| autorun: true

frutas <- c(
  "manzana", 
  "naranja", 
  "plátano", 
  "uva"
  )

for (index in seq_along(frutas)) {
  value <- frutas[index]
  cat(sprintf("Indice: %d, Valor: %s\n", index, value))
}

```

:::

::: {.column width="50%"}
### Python

```{pyodide}
#| autorun: true

frutas = [
  "manzana", 
  "naranja", 
  "plátano", 
  "uva"
  ]

for index, value in enumerate(frutas):
    print(f"Indice: {index}, Valor: {value}")
```

:::

:::

:::

## Vectores - Operaciones

- Podemos utilizar vectores para realizar operaciones en todos los elementos del vector. 
- Por ejemplo, puedes sumar todos los elementos de un vector utilizando la función `sum()`.

:::: {.panel-tabset group="language"}

## R

```{webr}

# Crear un vector de números
mis_numeros_suma <- c(1, 2, 3, 4, 5)

# Calcular la suma de los números
sum(mis_numeros_suma)

```

## Python

```{pyodide}
# Crear un vector de números
mis_numeros_suma = [1, 2, 3, 4, 5]

# Calcular la suma de los números
sum(mis_numeros_suma)
```

::::

En otro módulo del curso veremos más funciones y operaciones que puedes realizar con vectores.

# Ejercicio


**Instrucciones**. 

i, Crea un vector llamado `mis_numeros_ejercicio` con los valores `1, 2, 3, 4, y 5`.

i. Calcula la suma de los números en este vector con la función `sum()` y guarda el resultado en la variable `mis_numeros_suma`.

i. Calcula la media de los números en este vector como  `mis_numeros_suma / 5 `, guardando el resultado en la variable `mis_numeros_media`.

i. Corre el código. El resultado de `mis_numeros_media` debe ser `3`, que es la media de los números del vector.
Si tienes dudas, haz click en "*Show Solution*" para ver la solución. 

:::: {.panel-tabset group="language"}

## R

```{webr}
#| exercise: ex_2_r

# Crear un vector de números y asígnalo a la variable mis_numeros_ejercicio
______ <- _______

# Calcular la suma de los números
mis_numeros_suma <- sum(_______)

# Calcular la media de los números
mis_numeros_media <- _______

# Imprimir la media
print(mis_numeros_media)
```



::: { .solution exercise="ex_2_r" }
::: { .callout-tip collapse="false"}

## Solución

```r
# Crear un vector de números y asígnalo a la variable mis_numeros_ejercicio
mis_numeros_ejercicio <- c(1, 2, 3, 4, 5)

# Calcular la suma de los números
mis_numeros_suma <- sum(mis_numeros_ejercicio)

# Calcular la media de los números
mis_numeros_media <- mis_numeros_suma / 5

# Imprimir la media
print(mis_numeros_media)
```

:::
:::

## Python


```{pyodide}
#| exercise: ex_2_py

# Crear un vector de números y asígnalo a la variable mis_numeros_ejercicio
______ = _______

# Calcular la suma de los números
mis_numeros_suma = sum(_______)

# Calcular la media de los números
mis_numeros_media = _______

# Imprimir la media
print(mis_numeros_media)
```



::: { .solution exercise="ex_2_py" }
::: { .callout-tip collapse="false"}

## Solución

```Python
# Crear un vector de números y asígnalo a la variable mis_numeros_ejercicio
mis_numeros_ejercicio = [1, 2, 3, 4, 5]

# Calcular la suma de los números
mis_numeros_suma = sum(mis_numeros_ejercicio)

# Calcular la media de los números
mis_numeros_media = mis_numeros_suma / 5

# Imprimir la media
print(mis_numeros_media)
```

:::
:::

::::

