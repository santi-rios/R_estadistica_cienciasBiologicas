---
title: "Importar datos en R"
author:
  - name: "Mtro. Santiago Ríos"
    email: santiagoboo99@gmail.com
    affiliation: 
      - name: Cursos Orca
        city: CDMX
        url: orcaasesina.com
format: live-html
sidebar: false
webr:
    packages: 
        - dplyr
pyodide:
  packages:
    - matplotlib
    - ipython
    - pandas  # <--- Asegúrate de que pandas esté aquí
    - openpyxl # <--- Para leer archivos .xlsx
    # - xlrd # <--- Para leer archivos .xls más antiguos si es necesario
engine: knitr
navbar: false
resources:
    - datos/mtcars.csv
glossary:
  path: ../glossary.yml
  popup: hover
  show: true
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

## Introducción

En este módulo, aprenderás a importar datos en R/python desde diferentes fuentes, como archivos CSV y Excel. Importar datos es el primer paso en cualquier análisis de datos, ya que te permite cargar los datos en R/python para que puedas manipularlos, analizarlos y visualizarlos. 

![La exploración de datos es el primer paso para entender los datos y responder preguntas.](../images/data-flow.png)


# Terminología

## dataframe

- Un dataset, conjunto de datos o {{< glossary dataframe >}} es una colección de datos organizados en filas y columnas.
- Frecuentemente, estos datos son una combinación de números y caracteres.
- Estos conjuntos de datos contienen *variables* y *observaciones*.


## Variables

- Las {{< glossary variables >}} son las características o propiedades que se miden o registran en un estudio. En un dataframe, cada columna representa una variable.
- Cada variable representa una característica o atributo de los datos.
  - Por ejemplo, en la siguiente figura, tenemos 7 variables: ID, Apellido (Last Name), Nombre (First Name), Sexo, ciudad (City), Estado (State), y ocupación (Occupation).
- Los nombres de las variables son tomados de la primera fila del conjunto de datos.

![7 variables: ID, Apellido (Last Name), Nombre (First Name), Sexo, ciudad (City), Estado (State), y ocupación (Occupation)](../images/variables.png)

## Observaciones
- Una {{< glossary observación >}} representa un conjunto de valores de variables para un caso específico. En un dataframe, cada fila representa una observación..
dewe- Cada observación representa un caso o una instancia de los datos.

![Para cada variable, observamos 4 diferentes observaciones](../images/observaciones.png)

## Navegación de Directorios: La Notación de Punto

Cuando trabajas con archivos, es crucial entender cómo navegar por la estructura de carpetas (o directorios) de tu proyecto. Tanto R como Python utilizan una notación estándar para referirse a las rutas de los archivos.

-   **`.` (un solo punto)**: Representa el **directorio actual**. Si estás ejecutando un script, `.` se refiere a la carpeta donde se encuentra ese script o desde donde lo estás ejecutando. Por ejemplo, si quieres acceder a un archivo en la misma carpeta, puedes usar `./nombre_del_archivo`.

-   **`..` (dos puntos)**: Representa el **directorio padre** (la carpeta que contiene a la carpeta actual). Esto es útil para "subir" un nivel en la jerarquía de carpetas. Por ejemplo, si estás en `lecciones/` y quieres acceder a la carpeta `datos/`, que está al mismo nivel, usarías `../datos/`.

Comprender esto es fundamental para cargar datos o guardar resultados en la ubicación correcta.

## Visualización de un conjunto de datos
- R tiene varios conjuntos de datos de ejemplo que puedes cargar y explorar.
- Python, con la librería `pandas`, permite crear y manipular DataFrames de manera similar.
- Corre el siguiente código para ver un conjunto de datos de ejemplo.

::: {.panel-tabset group="language"}
# R
```{webr}
# Leer un archivo CSV desde una ruta relativa
# Usamos "./datos/mtcars.csv" para indicar que la carpeta "datos"
# se encuentra en el mismo nivel que el directorio desde donde se ejecuta el script.
datos_mtcars <- read.csv("./datos/mtcars.csv")

# Imprimir la tabla de datos
# kable(head(datos_mtcars)) # kable es para formato HTML, head() muestra las primeras filas
head(datos_mtcars)
```

# Python

```{pyodide}
import pandas as pd

# Leer un archivo CSV desde una ruta relativa
# Usamos "./datos/mtcars.csv" para indicar que la carpeta "datos"
# se encuentra en el mismo nivel que el directorio desde donde se ejecuta el script.
mtcars_py = pd.read_csv("./datos/mtcars.csv")

# Imprimir las primeras filas del DataFrame
print(mtcars_py.head())
```
:::

## data.frame (R) / DataFrame (Python)

- En R, los conjuntos de datos se almacenan en objetos llamados dataframes.
- En Python, la librería `pandas` proporciona una estructura similar llamada DataFrame.
- Al igual que una hoja de cálculo, un dataframe/DataFrame tiene filas y columnas, donde cada fila representa una observación y cada columna representa una variable.

## Crear un DataFrame
- Podemos crear un dataframe en R utilizando la función `data.frame()`.
- En Python, usamos `pd.DataFrame()` de la librería `pandas`.
- Esto se hace especificando los nombres de las columnas y las observaciones (datos) de cada columna.
- Observa que es similar a construir vectores (R) o listas/series (Python), donde cada columna es un vector/serie.
- En este código, creamos un dataframe llamado `datos` (R) o `datos_py` (Python) con tres columnas: nombre, edad y ciudad. 
- El nombre, edad y ciudad son las variables, y Juan, María y Pedro, 25,30,35, CDMX, GDL, MTY son las observaciones de cada variable.

::: {.panel-tabset group="language"}
# R
```{webr}
# crear una tabla de datos
datos <- data.frame(
  nombre = c("Juan", "María", "Pedro"),
  edad = c(25, 30, 35),
  ciudad = c("CDMX", "GDL", "MTY")
)

# Imprimir la tabla de datos (kable para formato HTML)
# kable(datos)
print(datos)
```
# Python
```{pyodide}
import pandas as pd

# crear un DataFrame
datos_py = pd.DataFrame({
  'nombre': ["Juan", "María", "Pedro"],
  'edad': [25, 30, 35],
  'ciudad': ["CDMX", "GDL", "MTY"]
})

# Imprimir el DataFrame
print(datos_py)
```
:::

## Leer un archivo CSV
- Los archivos CSV (valores separados por comas) son una forma común de almacenar datos.
- Comúnmente, los datos que queremos analizar se encuentran en archivos CSV.
- Para leer un archivo CSV en R, puedes utilizar la función `read.csv()`.
- En Python, usamos la función `pd.read_csv()` de `pandas`.
- Estas funciones leen un archivo CSV y lo convierten en un dataframe/DataFrame que puedes manipular y analizar. 
- Si ya tomaste la lección sobre directorios, sigue el siguiente código.

##

Primero, vamos a usar la función `list.files()` (R) o `os.listdir()` (Python) para ver qué archivos se encuentran en el directorio actual.	

::: {.panel-tabset group="language"}
# R
```{webr}
# Listar archivos en el directorio actual
list.files()
```
# Python
```{pyodide}
import os

# Listar archivos en el directorio actual
# Esto podría no funcionar como se espera en todos los entornos Pyodide
# sin acceso al sistema de archivos real o virtualizado.
# Asumimos que si 'datos' existe, se listará.
try:
    print(os.listdir("."))
except OSError as e:
    print(f"No se pudo listar el directorio actual: {e}")
    print("Esto es esperado en algunos entornos Pyodide sin un sistema de archivos persistente.")
    print("Asumiremos que la carpeta 'datos' y 'mtcars.csv' existen para los siguientes pasos.")
```
:::

- Veremos que hay una carpeta llamada `datos`.
- ¿Cómo sabemos que es una carpeta y no un archivo? Los archivos se muestran con el nombre del archivo y la extensión, como `datos.csv`. 

##

Ahora, vamos a listar los archivos dentro de la carpeta `datos`.

::: {.panel-tabset group="language"}
# R
```{webr}
# Listar archivos en la carpeta datos
# Asumiendo que la carpeta 'datos' existe y contiene 'mtcars.csv'
# Para que este ejemplo funcione en webr, la carpeta 'datos' y su contenido
# deben estar disponibles en el entorno virtual.
# list.files("datos")
print("Asumiendo que 'datos/mtcars.csv' existe.")
```
# Python
```{pyodide}
import os

# Listar archivos en la carpeta datos
# Similar al anterior, esto depende del entorno Pyodide.
try:
    # Para simular, creamos un archivo virtual si es posible,
    # o simplemente asumimos que existe.
    # En un entorno Pyodide real, necesitarías cargar el archivo.
    # pyodide.FS.mkdir("datos")
    # with open("datos/mtcars.csv", "w") as f:
    #     f.write("mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n") # Encabezado de ejemplo
    #     f.write("21.0,6,160,110,3.90,2.620,16.46,0,1,4,4\n") # Fila de ejemplo
    
    # print(os.listdir("datos"))
    print("Asumiendo que 'datos/mtcars.csv' existe.")
except OSError as e:
    print(f"No se pudo listar el directorio 'datos': {e}")
    print("Esto es esperado en algunos entornos Pyodide sin un sistema de archivos persistente.")
except Exception as e: # Captura otras excepciones de Pyodide FS
    print(f"Error al intentar simular el directorio 'datos': {e}")
    print("Asumiendo que 'datos/mtcars.csv' existe para los siguientes pasos.")

```
:::

- Veremos que hay un archivo llamado `mtcars.csv` en la carpeta `datos`.

## 
- ahora que tenemos la ruta del archivo, podemos leerlo con la función `read.csv("ruta_archivo")` (R) o `pd.read_csv("ruta_archivo")` (Python).

::: {.panel-tabset group="language"}
# R
```{webr}
# Para que este ejemplo funcione en webr, el archivo './datos/mtcars.csv'
# debe estar disponible en el entorno virtual.
# Si no está, este comando fallará.
# Por ahora, crearemos un dataframe mtcars y lo usaremos como si fuera leído.
data(mtcars) # Usamos el dataset incorporado como sustituto
datos_csv <- mtcars 
# En un caso real con el archivo disponible:
# datos_csv <- read.csv("./datos/mtcars.csv")

# Imprimir datos
# kable(head(datos_csv))
print(head(datos_csv))
```
# Python
```{pyodide}
import pandas as pd
import io # Para simular un archivo CSV

# Para que este ejemplo funcione en Pyodide, el archivo './datos/mtcars.csv'
# debe estar disponible. Podemos simularlo o intentar cargarlo.
# Aquí simulamos el contenido del CSV para asegurar que el código corra.
csv_data_content = """mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb
21.0,6,160,110,3.90,2.620,16.46,0,1,4,4
21.0,6,160,110,3.90,2.875,17.02,0,1,4,4
22.8,4,108,93,3.85,2.320,18.61,1,1,4,1
21.4,6,258,110,3.08,3.215,19.44,1,0,3,1
18.7,8,360,175,3.15,3.440,17.02,0,0,3,2
18.1,6,225,105,2.76,3.460,20.22,1,0,3,1
"""
# En un caso real con el archivo disponible:
# datos_csv_py = pd.read_csv("./datos/mtcars.csv")
# Para este ejemplo, leemos desde la cadena simulada:
datos_csv_py = pd.read_csv(io.StringIO(csv_data_content))

# Imprimir las primeras filas del DataFrame
print(datos_csv_py.head())
```
:::

## Leer archivos de Excel .xls y .xlsx

Para leer archivos de Excel en R, puedes utilizar las funciones `read_excel()` del paquete `readxl` y `read.xlsx()` del paquete `openxlsx`.
En Python, la librería `pandas` puede leer archivos Excel usando `pd.read_excel()`, que a su vez puede requerir paquetes como `openpyxl` (para `.xlsx`) o `xlrd` (para `.xls`).

::: {.panel-tabset group="language"}
# R
```{{r}}
# instalar el paquete readxl si no lo tienes instalado
# install.packages("readxl") # En webr/live-html, los paquetes se declaran en el YAML
# Cargar la librería (ya debería estar cargada si se especificó en YAML)
# library(readxl) 

# Leer un archivo de Excel
# el argumento sheet = 1 indica que se leerá la primera hoja del archivo
# Este código asume que "datos.xlsx" existe en el directorio de trabajo.
# datos_excel <- readxl::read_excel("datos.xlsx", sheet = 1)
# print(head(datos_excel)) # Para mostrar algo
```
# Python
```{{python}}
# import pandas as pd # Ya importado arriba, pero es bueno recordarlo

# Leer un archivo de Excel
# pd.read_excel() requiere que el archivo "datos.xlsx" exista.
# El argumento sheet_name=0 indica la primera hoja (indexado desde 0).
# sheet_name='Sheet1' también funcionaría si la hoja se llama 'Sheet1'.
# Para que esto funcione en Pyodide, el archivo "datos.xlsx" tendría que ser cargado.
# Ejemplo:
# try:
#     datos_excel_py = pd.read_excel("datos.xlsx", sheet_name=0)
#     print(datos_excel_py.head())
# except FileNotFoundError:
#     print("Archivo 'datos.xlsx' no encontrado. Este es un ejemplo de cómo se leería.")
#     # Crear un DataFrame de ejemplo para demostrar la funcionalidad
#     ejemplo_excel_py = pd.DataFrame({
#         'col1': [1, 2, 3],
#         'col2': ['a', 'b', 'c']
#     })
#     print("DataFrame de ejemplo (simulando lectura de Excel):")
#     print(ejemplo_excel_py.head())

# Nota: Para ejecutar esto en Pyodide, necesitarías subir 'datos.xlsx' o que
# pandas tenga acceso a él. Asegúrate de tener 'openpyxl' en tus paquetes pyodide.
```
:::
*Nota: La ejecución de lectura de archivos Excel en el navegador (Pyodide/webr) requiere que el archivo esté disponible en el sistema de archivos virtual. Para demostración, a menudo se simulan los datos o se usan URLs a archivos remotos.*

## Exportar un DataFrame

Para exportar un dataframe a un archivo CSV en R, puedes utilizar la función `write.csv()`.
En Python, con `pandas`, se usa el método `.to_csv()` de un DataFrame.

::: {.panel-tabset group="language"}
# R
```{{r}}
# Suponiendo que 'datos' es el DataFrame creado anteriormente:
# datos <- data.frame(
#   nombre = c("Juan", "María", "Pedro"),
#   edad = c(25, 30, 35),
#   ciudad = c("CDMX", "GDL", "MTY")
# )

# Exportar un dataframe a un archivo CSV
# write.csv(datos, "datos_exportados.csv", row.names = FALSE)
# print("DataFrame 'datos' exportado a 'datos_exportados.csv' (simulado en este entorno).")
```
# Python
```{{python}}
# import pandas as pd # Ya importado

# Suponiendo que 'datos_py' es el DataFrame creado anteriormente:
# datos_py = pd.DataFrame({
#   'nombre': ["Juan", "María", "Pedro"],
#   'edad': [25, 30, 35],
#   'ciudad': ["CDMX", "GDL", "MTY"]
# })

# Exportar un DataFrame a un archivo CSV
# En Pyodide, esto crea el archivo en el sistema de archivos virtual.
# Para descargarlo, se necesitarían pasos adicionales (no cubiertos aquí).
# datos_py.to_csv("datos_exportados_py.csv", index=False)
# print("DataFrame 'datos_py' exportado a 'datos_exportados_py.csv' (en el sistema de archivos virtual).")
```
:::
*Nota: La exportación de archivos en Pyodide/webr guarda el archivo en un sistema de archivos virtual en el navegador. Descargar el archivo al sistema del usuario requiere código adicional específico del entorno.*

## datos incluidos en R / Datasets de ejemplo en Python

R incluye varios conjuntos de datos de ejemplo. Python no tiene un sistema centralizado idéntico, pero librerías como `scikit-learn`, `seaborn`, o `pydataset` ofrecen datasets de ejemplo. `pandas` en sí no viene con datasets, pero puede cargar fácilmente datos de diversas fuentes.

::: {.panel-tabset group="language"}
# R
```{webr}
# Leer un conjunto de datos incluido en R
data(mtcars)

# Imprimir la tabla de datos con formato
# kable(head(mtcars))
print(head(mtcars))
```
# Python
```{pyodide}
import pandas as pd
# Reutilizamos el DataFrame mtcars_py creado anteriormente como ejemplo
# o podríamos cargar uno de librerías como seaborn si estuviera disponible y fuera relevante.
# Por ejemplo, con seaborn:
# import seaborn as sns
# iris_py = sns.load_dataset('iris')
# print(iris_py.head())

# Usando el mtcars_py que definimos antes:
data_mtcars = {
    'mpg': [21.0, 21.0, 22.8, 21.4, 18.7, 18.1], 'cyl': [6, 6, 4, 6, 8, 6],
    'hp': [110, 110, 93, 110, 175, 105], 'wt': [2.620, 2.875, 2.320, 3.215, 3.440, 3.460]
}
index_mtcars = ['Mazda RX4', 'Mazda RX4 Wag', 'Datsun 710', 'Hornet 4 Drive', 'Hornet Sportabout', 'Valiant']
mtcars_py = pd.DataFrame(data_mtcars, index=index_mtcars)

print("DataFrame mtcars_py (ejemplo):")
print(mtcars_py.head())
```
:::

## Otros formatos de archivo

Además de los archivos CSV y Excel, R y Python (con `pandas` y otras librerías) pueden leer y escribir en muchos otros formatos.

:::: {.panel-tabset group="language"}

## R (Referencia)
Aquí se muestran ejemplos de R para varios formatos.

### Prism
```{{r}}	
# library(pzfx)
# df <- read_pzfx(system.file("extdata/exponential_decay.pzfx", package="pzfx"), table="Exponential decay")
```

### SPSS
```{{r}}	
# library(haven)
# data11 <- read_sav("data/airline_passengers.sav")
```
### MatLAB
```{{r}}	
# library(R.matlab)
# data14 <- readMat("data/cross_dsads.mat")
```
### JSON
```{{r}}	
# library(rjson)
# JsonData <- fromJSON(file = 'data/drake_data.json')
# print(JsonData[1])
```
### SAS
```{{r}}	
# library(haven)
# data10 <- read_sas('data/lond_small.sas7bdat')
```

## Python (Equivalentes con Pandas y otras librerías)

### Prism
No hay una función directa en `pandas` para `.pzfx`. Se requerirían librerías especializadas o exportar de Prism a CSV/Excel.

### SPSS
`pandas` puede leer archivos SPSS (`.sav`) usando `pd.read_spss()`, que puede requerir la librería `pyreadstat`.
```{{python}}
# import pandas as pd
# try:
#     # data_spss_py = pd.read_spss("data/airline_passengers.sav")
#     # print(data_spss_py.head())
#     print("Para leer SPSS: pd.read_spss('ruta/archivo.sav')")
#     print("Requiere que el archivo exista y la librería 'pyreadstat' (si no está incluida en pandas por defecto).")
# except FileNotFoundError:
#     print("Archivo SPSS de ejemplo no encontrado.")
# except Exception as e:
#     print(f"Error al intentar leer SPSS (puede ser por 'pyreadstat' faltante): {e}")
```

### MatLAB
Archivos `.mat` de MatLAB se pueden leer con `scipy.io.loadmat()`. `pandas` no lo hace directamente, pero los datos pueden convertirse a DataFrames.
```{{python}}
# from scipy.io import loadmat
# import pandas as pd
# try:
#     # mat_data = loadmat('data/cross_dsads.mat')
#     # print("Datos cargados desde .mat (estructura puede variar):", type(mat_data))
#     # Convertir a DataFrame dependerá de la estructura del .mat
#     print("Para leer MatLAB: scipy.io.loadmat('ruta/archivo.mat')")
# except FileNotFoundError:
#     print("Archivo MatLAB de ejemplo no encontrado.")
# except ImportError:
#     print("Scipy no está disponible. Necesario para leer archivos .mat.")
```

### JSON
`pandas` tiene una función robusta `pd.read_json()`.
```{{python}}
# import pandas as pd
# try:
#     # json_data_py = pd.read_json('data/drake_data.json') # La estructura del JSON importa
#     # print(json_data_py.head())
#     print("Para leer JSON: pd.read_json('ruta/archivo.json')")
#     # Ejemplo con un string JSON simple:
#     json_string = '[{"col1": 1, "col2": "a"}, {"col1": 2, "col2": "b"}]'
#     df_from_json_string = pd.read_json(json_string)
#     print("DataFrame desde string JSON de ejemplo:")
#     print(df_from_json_string)
# except FileNotFoundError:
#     print("Archivo JSON de ejemplo no encontrado.")
```

### SAS
`pandas` puede leer archivos SAS (`.sas7bdat`, `.xport`) usando `pd.read_sas()`.
```{{python}}
# import pandas as pd
# try:
#     # data_sas_py = pd.read_sas('data/lond_small.sas7bdat')
#     # print(data_sas_py.head())
#     print("Para leer SAS: pd.read_sas('ruta/archivo.sas7bdat')")
# except FileNotFoundError:
#     print("Archivo SAS de ejemplo no encontrado.")

```
::::

## Funciones útiles para Dataframes

Los dataframes en R y DataFrames en Python (`pandas`) tienen muchas funciones/métodos útiles.

::: {.panel-tabset group="language"}
# R
```{webr}
# Usaremos el datos_csv (mtcars) del ejemplo de lectura de CSV
# data(mtcars) # Asegurarse que mtcars está cargado
# datos_csv <- mtcars
# Si datos_csv no existe, lo creamos como en el ejemplo anterior
if (!exists("datos_csv")) {
  data(mtcars)
  datos_csv <- mtcars
}


# Mostrar las primeras filas de un dataframe
print("Head de datos_csv:")
print(head(datos_csv))

# Mostrar las últimas filas de un dataframe
print("Tail de datos_csv:")
print(tail(datos_csv))

# Resumen estadístico
print("Summary de datos_csv:")
print(summary(datos_csv))

# Estructura del dataframe
print("Str de datos_csv:")
str(datos_csv) # str imprime directamente

# Número de filas
print(paste("Número de filas (nrow):", nrow(datos_csv)))

# Número de columnas
print(paste("Número de columnas (ncol):", ncol(datos_csv)))
```
# Python
```{pyodide}
import pandas as pd
import io

# Usaremos el datos_csv_py del ejemplo de lectura de CSV
# Si datos_csv_py no existe, lo (re)creamos como en el ejemplo anterior
if 'datos_csv_py' not in locals():
    csv_data_content = """mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb
21.0,6,160,110,3.90,2.620,16.46,0,1,4,4
21.0,6,160,110,3.90,2.875,17.02,0,1,4,4
22.8,4,108,93,3.85,2.320,18.61,1,1,4,1
"""
    datos_csv_py = pd.read_csv(io.StringIO(csv_data_content))

# Mostrar las primeras filas de un DataFrame
print("Head de datos_csv_py:")
print(datos_csv_py.head())

# Mostrar las últimas filas de un DataFrame
print("\nTail de datos_csv_py:")
print(datos_csv_py.tail())

# Resumen estadístico
print("\nDescribe (summary) de datos_csv_py:")
print(datos_csv_py.describe())

# Estructura del DataFrame (tipos de datos, memoria, etc.)
print("\nInfo (structure) de datos_csv_py:")
datos_csv_py.info() # .info() imprime directamente

# Número de filas
print(f"\nNúmero de filas (shape[0]): {datos_csv_py.shape[0]}")
# Alternativa para número de filas: print(f"Número de filas (len): {len(datos_csv_py)}")


# Número de columnas
print(f"Número de columnas (shape[1]): {datos_csv_py.shape[1]}")
# Alternativa para número de columnas: print(f"Número de columnas (len(columns)): {len(datos_csv_py.columns)}")

```
:::