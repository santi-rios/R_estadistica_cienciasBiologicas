---
title: "Introducción a la Programación para Ciencias de la Salud"
subtitle: "Fundamentos con R y Python"
author: "Cursos Orca"
format: 
    live-html: 
        toc: true
        toc-depth: 2
        toc-title: Contenido de la Lección
        lang: es
webr:
    packages: 
        - ggplot2
engine: knitr
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

## ¿Qué es Programar?

Programar, en esencia, es dar instrucciones a una computadora para que realice tareas específicas. Piensa en ello como escribir una receta muy detallada: cada paso debe ser claro y preciso para que la computadora (el cocinero) pueda seguirlo y producir el resultado deseado.

![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/483e1776-7126-4255-8e84-0557c397025f_rw_1200.png?h=bf487bf87b6ec11f1806dc1094def1d3)


En las ciencias de la salud, utilizamos la programación para:

- Analizar grandes conjuntos de datos de pacientes para identificar patrones.
- Automatizar la generación de informes a partir de resultados de laboratorio.
- Crear modelos para simular la propagación de enfermedades.
- Desarrollar herramientas para la visualización de datos médicos complejos.
- Entre muchas otras aplicaciones.
  
> Programar nos permite transformar datos en información útil, facilitando la toma de decisiones informadas en el ámbito de la salud.

![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/5c559781-f15a-4be9-8af0-426fcc71a9e8_rw_1200.png?h=c7af78be544ee13532fb2152727af996)

## ¿Por Qué Necesitamos Programar en Ciencias de la Salud?

El campo de la salud genera una cantidad masiva de datos diariamente: historiales médicos electrónicos, resultados de investigaciones, datos genómicos, imágenes médicas, y más. La programación nos ofrece las herramientas para:

- **Manejar y Analizar Grandes Volúmenes de Datos (Big Data):** Las hojas de cálculo tradicionales tienen limitaciones. La programación permite procesar y analizar datasets que serían imposibles de manejar manualmente.
  - Por ejemplo, revisa [este artículo](https://www.microassist.com/software-tips/real-world-risks-of-spreadsheet-errors/) que explica que hasta 90% de las hojas de cálculo contienen errores. Estos errores pueden tener consecuencias graves y costar MILLONES de dólares.
- **Automatización de Tareas Repetitivas:** Muchas tareas, como la limpieza de datos, la generación de gráficos estándar o la creación de informes, pueden automatizarse, ahorrando tiempo y reduciendo errores.
- **Reproducibilidad en la Investigación:** El código documenta exactamente cómo se analizaron los datos. Esto es crucial para la transparencia y la validación de los resultados de la investigación.
- **Análisis Avanzados y Modelado:** Técnicas como el aprendizaje automático (machine learning) y la modelización estadística, que son cada vez más importantes en la investigación médica y la salud pública, requieren programación.
- **Personalización:** Permite crear soluciones específicas para problemas concretos que las herramientas "listas para usar" no pueden abordar.

## ¿Por Qué R y Python?

R y Python son dos de los lenguajes de programación más populares en la ciencia de datos y, por extensión, en las ciencias de la salud.

> Selecciona (en las pestañas R y/o Python) el lenguaje que más te interese o el que creas que se adapta mejor a tus necesidades. 
> Ambos son excelentes opciones y aprender uno te facilitará aprender el otro en el futuro.

:::: {.panel-tabset group="language"}

## R

R fue diseñado específicamente para el análisis estadístico y la visualización de datos.

- **Fortalezas:**
    - Amplia gama de paquetes estadísticos especializados (bioestadística, epidemiología, genómica).
    - Excelente para la visualización de datos de alta calidad (ggplot2).
    - Comunidad activa y de gran apoyo en el ámbito académico y de investigación.
- **Ejemplo Sencillo (Cargar un paquete y ver datos):**
  No te preocupes por entender todo el código ahora, solo observa la estructura.
  ```{webr}
  # Cargar un paquete para visualización
  library(ggplot2)

  # Ver las primeras filas de un conjunto de datos de ejemplo
  head(mpg)
  ```

## Python

Python es un lenguaje de programación de propósito general, conocido por su sintaxis clara y legible.

- **Fortalezas:**
    - Versátil: útil para análisis de datos, desarrollo web, aprendizaje automático, y más.
    - Curva de aprendizaje amigable para principiantes.
    - Extensas bibliotecas para ciencia de datos (Pandas, NumPy, Scikit-learn) y visualización (Matplotlib, Seaborn).
    - Buena integración con otras tecnologías y sistemas.
- **Ejemplo Sencillo (Importar una librería y crear una lista):**
  No te preocupes por entender todo el código ahora, solo observa la estructura.

  ```{pyodide}
  # Importar una librería para manejo de datos
  import pandas as pd

  # Crear una pequeña serie de datos
  datos_pacientes = pd.Series([25, 34, 45, 29], name="Edad")
  print(datos_pacientes)
  ```

::::

Ambos lenguajes son de código abierto, gratuitos y cuentan con grandes comunidades de usuarios, lo que significa abundantes recursos de aprendizaje y soporte. La elección entre R y Python a menudo depende de la tarea específica, las preferencias personales o los estándares del equipo de trabajo. En este curso, te introduciremos a ambos.

## Temas que Aprenderemos en este Curso

Este curso está diseñado para llevarte desde los conceptos básicos hasta la capacidad de realizar análisis de datos sencillos en R y Python. Cubriremos:

1.  **Fundamentos de la Programación:**
    *   Variables y tipos de datos.
    *   Operadores básicos (aritméticos, lógicos).
    *   Estructuras de control (condicionales, bucles).
    *   Funciones.
2.  **Manejo de Datos:**
    *   Importación y exportación de datos (CSV, Excel).
    *   Limpieza y transformación de datos.
    *   Filtrado y selección de datos.
3.  **Análisis Estadístico Descriptivo:**
    *   Cálculo de medias, medianas, desviaciones estándar.
    *   Tablas de frecuencia.
4.  **Visualización de Datos:**
    *   Creación de gráficos básicos (histogramas, diagramas de dispersión, diagramas de caja).
5.  **Introducción a Paquetes/Librerías Clave:**
    *   En R: `dplyr`, `ggplot2`.
    *   En Python: `pandas`, `matplotlib`/`seaborn`.
6.  **Buenas Prácticas y Flujo de Trabajo:**
    *   Comentar el código.
    *   Organización de proyectos.
    *   Principios de reproducibilidad.

---

# ¡Empecemos! Tu Primer Código

Ahora que tienes una idea general, vamos a sumergirnos en la práctica. La forma más básica de interactuar con R y Python es usándolos como una calculadora.

## Operaciones Aritméticas Básicas

Puedes realizar operaciones como suma, resta, multiplicación y división.

### Suma

:::: {.panel-tabset group="language"}

## R

```{webr}
# Suma
3 + 5
```

## python

```{pyodide}
# Suma
3 + 5
```

::::

::: {.callout-important}
## Punto Clave - Salida o Output

- Observa cómo al ejecutar el código, se muestra el resultado de la operación.
- Este resultado se conoce como la **salida** u **output**.

Si realizas múltiples operaciones, verás múltiples salidas.

:::: {.panel-tabset group="language"}

## R

```{webr}
# Output 1
10 + 15

# Output 2
30 + 7
```

## python

En Python, para asegurar que cada resultado se muestre explícitamente, a menudo usamos la función `print()`.

```{pyodide}
# Output 1
print(10 + 15)

# Output 2
print(30 + 7)
```

::::
:::

### Resta

:::: {.panel-tabset group="language"}

## R

```{webr}
# Resta
100 - 45
```

## python

```{pyodide}
# Resta
100 - 45
```

::::

::: {.callout-important}
## Punto Clave - Comentarios

- En R y Python, el símbolo `#` se utiliza para escribir **comentarios**.
- El intérprete (el programa que ejecuta tu código R o Python) ignora cualquier texto que siga a un `#` en la misma línea.
- Los comentarios son cruciales para:
    - Explicar qué hace tu código.
    - Hacerlo más legible para ti (en el futuro) y para otros.
    - Desactivar temporalmente líneas de código sin borrarlas.

Observa cómo en el siguiente bloque, si las operaciones están comentadas, no se produce ninguna salida.

:::: {.panel-tabset group="language"}

## R

```{webr}
# Suma (comentada, no se ejecuta)
# 50 + 50

# División (comentada, no se ejecuta)
# 100 / 2
```

## python

```{pyodide}
# Suma (comentada, no se ejecuta)
# 50 + 50

# División (comentada, no se ejecuta)
# 100 / 2
```
::::
Descomenta (borra el `#`) alguna de las líneas anteriores y vuelve a ejecutar el código para ver la salida.
:::

Continuaremos con más operaciones y conceptos en las siguientes secciones.