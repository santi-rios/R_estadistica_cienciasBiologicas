---
title: "Empieza a programar con R"
subtitle: "Familiarízate con R"
author: "Cursos Orca"
format: 
    live-html: 
        toc: true
        # theme: simple
        # scrollable: true
        toc-depth: 2
        toc-title: Contenido de la Lección
        # progress: true
        # slide-number: true
        lang: es
        # logo: "https://cran.r-project.org/Rlogo.svg"
webr:
    packages: 
        - ggplot2
engine: knitr
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

## Introducción

- Estos ejercicios son sencillos y están diseñados para introducir a los usuarios al entorno de R/python de una manera práctica.
- En esta lección, aprenderás a correr código en R, asignar valores a variables y hacer operaciones con ellas.


---

# Ejecutar Tu Primer Código en R/python

## Operaciones Aritméticas Básicas

En R y python, puedes realizar operaciones aritméticas básicas como suma, resta, multiplicación, división y potencia. Ejecuta el siguiente código y observa los resultados:

### *Suma*

:::: {.panel-tabset}

## R


```{webr}

# Suma
3 + 5

```

## python

```{pyodide}
# Suma
3 + 5
```

:::: 

::: {.callout-important}
## Punto Clave - Salida o Output

- Observa cómo al ejecutar el código, se muestra el resultado de cada operación aritmética en una línea de mensaje. 
- Este es el resultado y es conocido como la **salida** o **output** de la operación.

Corre el siguiente código que tiene 2 operaciones aritméticas y observa cómo se muestran 2 salidas, una para cada operación en una línea de mensaje.

:::: {.panel-tabset}

## R

```{webr}
# output 1
3 + 5

# output 2
20 + 4

```

## python

Utilizamos `print()` para mostrar la salida en python. Observa que no es necesario usar `print()` en R, ya que R lo hace automáticamente.

```{pyodide}
# output 1
print(3 + 5)

# output 2
print(20 + 4)
```

::::

:::

### Resta

:::: {.panel-tabset}

## R


```{webr}

# Resta
10 - 4

```

## python

```{pyodide}

# Resta
10 - 4
```

::::

::: {.callout-important}
## Punto Clave - Comentario

- En R/python, el símbolo `#` se utiliza para hacer comentarios. 
- R/python ignora los comentarios al ejecutar el código.
- Los comentarios son útiles para explicar el código y hacerlo más legible. 
- Observa como en el siguiente código si comentamos las operaciones, no tendremos salida.

:::: {.panel-tabset}

## R

```{webr}

# Suma
# 3 + 5

# División
# 20 / 4

# Potencia
# 2^3

```

## python

```{pyodide}
# Suma
# 3 + 5

# División
# 20 / 4

# Potencia
# 2^3
```

::::

- Si quitamos el símbolo `#` de la operación, obtendremos la salida.
- Trata de remover el símbolo `#` de la línea de código que explica la operación aritmética y observa el error. 
  - En otra lección veremos a detalle el tema de los errores en códigos. Por lo mientras, solo observa que se produce un error si quitamos el comentario `#` en la línea de texto que explica.

:::

### *Multiplicación*

:::: {.panel-tabset}

## R


```{webr}
# Multiplicación
7 * 6
```

## python

```{pyodide}
# Multiplicación
7 * 6
```

::::

### *División*

:::: {.panel-tabset}

## R

```{webr}

# División
20 / 4
```

## python

```{pyodide}
# División
20 / 4
```

::::

### *Potencia*

:::: {.panel-tabset}

## R


```{webr}
# Potencia
2^3

```

## python

```{pyodide}
# Potencia
2^3
```

::::

### *Modulo*:

:::: {.panel-tabset}

## R


```{webr}
# Modulo
10 %% 3

```

## python

```{pyodide}
# Modulo
10 % 3
```

::::

**Nota**: el operador de modulo se utiliza para obtener el residuo de una división. Por ejemplo, 10 %% 3 es igual a 1, ya que 10 dividido entre 3 es 3 y sobra 1. 


# Variables

- Una variable te permite almacenar un valor (números, palabras, datos) y hacer referencia a él en tu código. 


![Piensa en una variable como una caja donde puedes guardar un valor y luego utilizarlo.](figuras/variable.png)


## Asignación de Variables

:::: {.panel-tabset}

## R

- En R, puedes asignar valores a variables utilizando el operador `<-` o el operador `=` (menos utilizado; no se recomienda). 
- En el siguiente ejemplo, asignamos el valor `10` a la variable `x` y luego vemos el valor guardado de `x`. 

```{webr}

# Asignación de variables
x <- 10

# Ver el valor de x
x

```

## python

- En python, puedes asignar valores a variables utilizando el operador `=`.
- En el siguiente ejemplo, asignamos el valor `10` a la variable `x` y luego vemos el valor guardado de `x`.


```{pyodide}

# Asignación de variables
x = 10

# Ver el valor de x
x

```


::::

## Ver los Valores con `print()`

::: {.callout-note}

¿A qué nos referimos con ¨imprimir¨? 

- En R/python, puedes *imprimir* o visualizar un valor, como una variable, utilizando la función `print()`. 
- En muchos de los casos (como toda la lección hasta este punto), no es necesario utilizar `print()` para ver los valores.
- Sin embargo, es una buena práctica utilizar `print()` para mostrar resultados de operaciones o valores de variables, especialmente cuando estás trabajando con scripts o funciones.

:::

## Operaciones con Variables

- Al igual que con los números, puedes realizar operaciones aritméticas con variables (siempre y cuando las variables sean numéricas).
- En  el siguiente ejemplo, asignamos valores numéricos a las variables `a` y `b`, y luego multiplicamos `a x b`. 

:::: {.panel-tabset}

## R

```{webr}

a <- 10 # variable a vale 10
b <- 5 # variable b vale 5

a * b # es igual a 10 * 5

```

- En el siguiente ejemplo, asignamos valores NO numéricos a las variables `a` y `b`, y luego multiplicamos `a` por `b`.
- Esto nos dará un error, ya que no se pueden multiplicar valores no numéricos. Esto se expande en la lección sobre los tipos de datos en R más adelante en el curso.

```{webr}
a <- "diez" # variable a vale 10
b <- "cinco" # variable b vale 5

a * b # Error: no se pueden multiplicar valores no numéricos

```


## Python


```{pyodide}
a = 10 # variable a vale 10
b = 5 # variable b vale 5

a * b # es igual a 10 * 5

```

- En el siguiente ejemplo, asignamos valores NO numéricos a las variables `a` y `b`, y luego multiplicamos `a` por `b`.
- Esto nos dará un error, ya que no se pueden multiplicar valores no numéricos. Esto se expande en la lección sobre los tipos de datos en python más adelante en el curso.

```{webr}
a = "diez" # variable a vale 10
b = "cinco" # variable b vale 5

a * b # Error: no se pueden multiplicar valores no numéricos
```

::::


## Variables - Cómo nombrarlas

- En R y python, las variables pueden tener nombres descriptivos y significativos:
  - Los nombres de las variables pueden contener letras, números y guiones bajos, pero no pueden comenzar con un número.
  - Los nombres de las variables no pueden contener espacios, pero puedes usar guiones bajos (`nombre_variable`) para separar palabras.
  - Es una buena práctica utilizar nombres de variables descriptivos y significativos para hacer tu código más legible (ej. `edad`, `altura`, `peso`).
  - No usar nombre que puedan tener conflicto o que ya estén reservados para funciones de R, como `c`, `mean`, `sum`, `data`, o de python, como `print`, `input`, `list`, `dict`, etc.

::: {.callout-caution}
- A diferencia de la analogía de la variable como una caja, cuando usamos ("abrimos") una variable, esta variable mantendrá su valor almacenado en la memoria.
  - Esto es útil porque podemos usar el valor de la variable en otras operaciones o funciones sin perder su valor original.
- Si asignas un nuevo valor a una variable existente, el valor anterior se perderá. A veces, esto puede ser útil, pero en general, es una buena práctica utilizar nombres de variables únicos y descriptivos para evitar confusiones.
:::

# Ejericios de la lección

## Ejercicio 1 - Modulo

¿Cuál será el resultado de `5 modulo 3`? Observa el resultado.

1. Escribe el código en R y/o python para calcular el resultado de `5 modulo 3` en las líneas punteadas `______`.
2. Asigna el resultado a una variable llamada `modulo`.
3. Después de escribir el código, haz click en el botón `Run Code`.
4. Si no puedes resolverlo, puedes ver la solución haciendo click en el botón de ayuda.

:::: {.panel-tabset}

## R

```{webr}
#| exercise: ex_0_r

# Modulo
modulo <- (_______)  # Escribir respuesta aquí

# imprimir el resultado con print(nombre_variable)
print(modulo)
```

```{webr}
#| exercise: ex_0_r
#| check: true

if (identical(.result, 2)) {
  list(correct = TRUE, message = "Correcto!")
} else {
  list(correct = FALSE, message = "Incorrecto.")
}
```

::: {.solution exercise="ex_0_r"}
## Solución y explicación:

`5 modulo 3`, o `5 %% 3`? es igual a 2, ya que 5 dividido entre 3 es 1 y sobra 2.

```r
# Modulo
modulo <- (5 %% 3)  # Escribir respuesta aquí

# imprimir el resultado con print(nombre_variable)
print(modulo)
```

:::

## python

```{pyodide}
#| exercise: ex_0_py

modulo = (_______)  # Escribir respuesta aquí

# Modulo
modulo
```


```{pyodide}
#| exercise: ex_0_py
#| check: true

modulo = (5 % 3)  # Esto es 2
feedback = None

if (result == modulo):
  feedback = { "correct": True, "message": "Correcto" }
else:
  feedback = { "correct": False, "message": "Incorrecto." }
feedback
```

::: {.solution exercise="ex_0_py"}
## Solución y explicación:

`5 modulo 3`, o `5 % 3`? es igual a 2, ya que 5 dividido entre 3 es 1 y sobra 2.

```python
modulo = (5 % 3)

# Modulo
modulo
```

:::

:::: 

