---
title: "Variables y Tipos de Datos"
subtitle: "Introducción para Ciencias de la Salud"
author: "Cursos Orca"
format:
  live-html:
    toc: true
    toc-depth: 2
    toc-title: Contenido de la Lección
    lang: es
navbar: false
webr:
  packages:
    - ggplot2
engine: knitr
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

## ¿Qué son las Variables?

Una variable es como una etiqueta que le pones a un valor en la memoria de la computadora. Imagina que tienes cajas donde guardas cosas. Cada caja tiene una etiqueta para que sepas qué hay dentro. En programación, las variables son esas etiquetas.

![](./figuras/variables.jpg)


Por ejemplo, si tienes una caja (variable que llamaremos X) que guarda la edad de un paciente (valor igual a 1), podrías llamar la variable `x` o `edad_paciente`. Así, cada vez que necesites saber la edad, solo miras esa caja.

![](./figuras/variables_ejemplo.jpg)


### Asignación de Variables
Para asignar un valor a una variable, usamos un símbolo especial. En R, usamos `<-`, y en Python, usamos `=`.

:::: {.panel-tabset group="language"}

## R

En R, la asignación se ve así:
- Primero, creamos una variable llamada `edad_paciente` y le asignamos un valor de 30 años.
- Al correr el código, estamos guardando el valor 30 en la variable `edad_paciente`.

```{webr}
edad_paciente <- 30
```

Y para imprimir el valor de la variable, simplemente escribimos su nombre:
```{webr}
edad_paciente
```

## Python

En Python, se ve así:
- Primero, creamos una variable llamada `edad_paciente` y le asignamos un valor de 30 años.
- Al correr el código, estamos guardando el valor 30 en la variable `edad_paciente`.

```{pyodide}
edad_paciente = 30
```

Y para imprimir el valor de la variable, usamos la función `print()`:

```{pyodide}
print(edad_paciente)
```

::::

## Tipos de Datos

Los tipos de datos definen qué tipo de información puede guardar una variable. Algunos tipos comunes son:

*   **Numéricos:** Para números (enteros o decimales). Por ejemplo, la edad de un paciente o su peso.

```
edad_paciente <- 30
```

*   **Texto (Strings):** Para palabras o frases. Por ejemplo, el nombre de un paciente. **nota**: observa como usamos comillas para definir un string, a diferencia de los números que no necesitan comillas.

```
nombre_paciente <- "Juan Pérez"
```

*   **Booleanos:** Para valores de verdadero o falso.Por ejemplo, si un paciente es fumador o no. **NOTA**: en R usamos `TRUE` o `FALSE`, mientras que en Python usamos `True` o `False`.

```
es_fumador <- TRUE
```

> Por el momento nos enfocaremos en estos tipos de datos básicos. A medida que avancemos, veremos otros tipos más complejos.

## Ejercicio de Variables en R y Python

Veamos cómo crear variables y asignarles valores en R y Python. Tienes que crear variables para almacenar la edad (variable numérica), el nombre (string) y si el paciente es fumador o no (booleano). Luego, imprime los valores de esas variables y verifica que su tipo de dato sea el que se pide.

- NOTA. Para verificar el tipo de dato de una variable, usamos funciones específicas en cada lenguaje:
  - En R, usamos `typeof()` para verificar el tipo de datos.
  - En Python, usamos `type()` para el mismo propósito

:::: {.panel-tabset group="language"}

## R

- La salida de este ejercicio debe dar los valores:
  - `temperatura_corporal` = "double" (número decimal)
  - `tiene_fiebre` = "logical" (booleano)
  - `diagnostico` = "character" (texto)

```{webr}
#| exercise: ex_tipos_r

# 1. Crea una variable numérica llamada 'temperatura_corporal' con valor 37.5
temperatura_corporal <- _______

# 2. Crea una variable booleana llamada 'tiene_fiebre' que sea TRUE 
tiene_fiebre <- _______

# 3. Crea una variable tipo texto llamada 'diagnostico' con el valor "Paciente sano"
diagnostico <- _______

# 4. Ahora verifica el tipo de cada variable
typeof(temperatura_corporal)
typeof(tiene_fiebre)
typeof(diagnostico)

```

En R, usamos `<-` para asignar valores a las variables.

::: { .solution exercise="ex_tipos_r" } 
::: { .callout-tip collapse="false"}

## Solución

```r
# 1. Crea una variable numérica llamada 'temperatura_corporal' con valor 37.5
temperatura_corporal <- 37.5

# 2. Crea una variable booleana llamada 'tiene_fiebre' que sea TRUE si temperatura_corporal > 38
tiene_fiebre <- TRUE

# 3. Crea una variable tipo texto llamada 'diagnostico' con el valor "Paciente sano"
diagnostico <- "Paciente sano"

```

:::
:::

## Python

- La salida de este ejercicio debe dar los valores:
    - `temperatura_corporal` = "float" (número decimal)
    - `tiene_fiebre` = "bool" (booleano)
    - `diagnostico` = "str" (texto)

```{pyodide}
#| exercise: ex_tipos_py

# 1. Crea una variable numérica llamada 'temperatura_corporal' con valor 37.5
temperatura_corporal = _______

# 2. Crea una variable booleana llamada 'tiene_fiebre' que sea True
tiene_fiebre = _______

# 3. Crea una variable tipo texto llamada 'diagnostico' con el valor "Paciente sano"
diagnostico = _______

# 4. Ahora verifica el tipo de cada variable
print(type(temperatura_corporal))
print(type(tiene_fiebre))
print(type(diagnostico))

```

En Python, usamos `=` para asignar valores. 

::: { .solution exercise="ex_tipos_py" } 
::: { .callout-tip collapse="false"}

## Solución

```python
# 1. Crea una variable numérica llamada 'temperatura_corporal' con valor 37.5
temperatura_corporal = 37.5

# 2. Crea una variable booleana llamada 'tiene_fiebre' que sea True si temperatura_corporal > 38
tiene_fiebre = temperatura_corporal > 38

# 3. Crea una variable tipo texto llamada 'diagnostico' con el valor "Paciente sano"
diagnostico = "Paciente sano"
```

::: 
:::

::::


::: {.callout-important}
## Punto Clave - Nombres de Variables

*   Los nombres de las variables deben ser descriptivos.
*   Evita espacios en los nombres; usa guiones bajos (`_`).
*   R es más tolerante, pero en general, los nombres deben empezar con una letra.
*   Python es sensible a mayúsculas y minúsculas (`edad` es diferente de `Edad`).
:::

## Operaciones con Variables

Una vez que tienes variables, puedes realizar operaciones con ellas.

### Operaciones Numéricas

:::: {.panel-tabset group="language"}

## R

```{webr}
edad_paciente <- 35
peso_paciente_kg <- 75.5
altura_paciente_m <- 1.75

# Calcular el IMC (índice de masa corporal)
imc <- peso_paciente_kg / (altura_paciente_m ^ 2)

# Imprimir los resultados
edad_paciente
imc
```

## Python

```{pyodide}
edad_paciente = 35
peso_paciente_kg = 75.5
altura_paciente_m = 1.75

# Calcular el IMC (índice de masa corporal)
imc = peso_paciente_kg / (altura_paciente_m ** 2)

# Imprimir los resultados
print(edad_paciente)
print(imc)
```

::::

### Concatenación de Textos (Strings)

Intenta remplazar los valores de las variables `nombre` y `apellido` con tu propio nombre y apellido. Si tienes un segundo apellido, puedes agregarlo también e intentar concatenarlo. 

:::: {.panel-tabset group="language"}

## R

```{webr}
nombre <- "Juan"
apellido <- "Pérez"

# Concatenar nombre y apellido
nombre_completo <- paste(nombre, apellido)

# Imprimir el resultado
nombre_completo
```

## Python

```{pyodide}
nombre = "Juan"
apellido = " Pérez"

# Concatenar nombre y apellido
nombre_completo = nombre + apellido

# Imprimir el resultado
print(nombre_completo)
```

::::