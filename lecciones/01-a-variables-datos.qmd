---
title: "Objetos y Variables"
author: "Cursos Orca"
format:
  live-html:
    toc: true
    toc-depth: 2
    toc-title: Contenido de la Lección
    lang: es
navbar: false
webr:
  packages:
    - ggplot2
engine: knitr
glossary:
  path: ../glossary.yml
  popup: hover
  show: true
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}


En la lección pasada generamos instrucciones en R/Python para realizar operaciones e imprimir un texto. Todos estos elementos que tenemos disponibles para completar dichas tareas: la instrucción `print()`, los operadores `+` y `-`, los resultados de las sumas y restas, etc., se conocen como {{< glossary entorno >}} o ambiente. A los elementos que tenemos disponibles en el entorno, se les llama {{< glossary objetos >}}.

![Regresando al ejemplo del cocinero, el entorno sería la cocina, la persona el lenguaje de programación y los utensilios de la cocina serían los objetos](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/5c559781-f15a-4be9-8af0-426fcc71a9e8_rw_1200.png?h=c7af78be544ee13532fb2152727af996)

## Objetos

A medida que avancemos, veremos que existen distintas clases de {{< glossary objetos >}}, algunos con estructuras más simples y otros más complejos. Adicionalmente, cada lenguaje de programación tiene sus propios objetos, maneras de llamarlos y formas de crear nuestros propios objetos.

Como primera lección en este tema, vamos a revisar los 3 tipos de datos que podemos guardar en objetos: datos numéricos, datos de texto y datos lógicos.

## ¿Qué son las Variables?

> "En programación, una variable es un espacio de memoria nombrado que se utiliza para almacenar datos".

Ciertos objetos pueden almacenar temporalmente un valor (datos). Estos objetos se conocen como **variables**. Como su nombre lo indica, el valor de estos objetos puede cambiar y solamente está disponible cuando le indicamos a R/Python que lo guarde. Para guardar la variable, le asignamos una etiqueta.  

Para entender este concepto, imagina que tienes una caja (la *variable*) donde guardas cosas (*datos*). Para identificar la caja, le pones una etiqueta o nombre para que sepas :

![Si la variable tiene siempre un valor fijo, se dice que es una constante. En lecciones más avanzadas, veremos que normalmente es útil declarar las constantes al inicio de nuestro programa.](./figuras/variables.jpg){fig-align="center"}

Por ejemplo, si tienes una caja (*variable*) que guarda la edad de un paciente (*valor igual a 1*), podrías llamar la variable `x`. Así, cada vez que necesites saber la edad, solo llamas a `x` y obtienes el valor que guardaste allí. Sin embargo, se recomienda elegir un nombre para la variable que sea representativo de la información que va a guardar el objeto, como `edad_paciente` en lugar de `x`.

![](./figuras/variables_ejemplo.jpg){fig-align="center"}


### Asignación de Variables

Para hacer que una variable guarde un determinado valor se tiene que asignar el valor. Para asignar un valor a una variable, usamos un símbolo especial. En R, usamos `<-`, y en Python, usamos `=`.

Vamos a crear una variable y asignarle un valor:

:::: {.panel-tabset group="language"}

## R

Antes que nada, corre el siguiente código y observa el error `Error: object 'edad_paciente' not found`. Esto sucede porque estamos "abriendo" la variable `edad_paciente` sin antes haberle asignado un valor.

```{webr}
edad_paciente
```

Para solucionar esto:

- Primero, creamos una variable llamada `edad_paciente` y le asignamos `<-` un valor de `30`.
- Al correr el código, estamos guardando el valor 30 en la variable `edad_paciente`. En este punto solo estamos creando y guardando en la memoria la variable.

```{webr}
edad_paciente <- 5
```

Y para ver el valor de la variable, simplemente escribimos su nombre:

```{webr}
edad_paciente
```

## Python

Antes que nada, corre el siguiente código y observa el error `name 'edad_paciente' is not defined`. Esto sucede porque estamos "abriendo" la variable `edad_paciente` sin antes haberle asignado un valor.

```{pyodide}
edad_paciente
```

Para solucionar esto:

- Primero, creamos una variable llamada `edad_paciente` y le asignamos `=` un valor de 30.
- Al correr el código, estamos guardando el valor 30 en la variable `edad_paciente`. En este punto solo estamos creando y guardando en la memoria la variable.

```{pyodide}
edad_paciente = 5
```

Y para ver el valor de la variable, simplemente escribimos su nombre:

```{pyodide}
edad_paciente
```

::::

Ahora que ya creamos la variable `edad_paciente`, vamos a cambiar el valor que almacenamos con distintos tipos de datos. Recuerda que al crear esta variable, la estamos haciendo disponible en el entorno.

![](../images/variables_b.png)

---

## Tipos de Datos

Los tipos de datos definen qué tipo de información puede guardar una variable. Algunos tipos comunes son:

*   **Numéricos:** Para números (enteros o decimales). Por ejemplo, la edad de un paciente o su peso. En el ejemplo pasado, este es el tipo de datos que hemos visto:

::: {.panel-tabset group="language"}

# R

```{webr}
edad_paciente <- 5
edad_paciente
```

## Python

```{pyodide}
edad_paciente = 5
edad_paciente
```

:::

*   **Texto (Strings o caracteres):** Para palabras o frases. Por ejemplo, el nombre de un paciente. **nota**: observa como usamos comillas para definir un string, a diferencia de los números que no necesitan comillas.

::: {.panel-tabset group="language"}

# R

```{webr}
edad_paciente <- "cinco"
edad_paciente
```

## Python

```{pyodide}
edad_paciente = "cinco"
edad_paciente
```

:::

::: {.callout-note}

Observa que cambiamos el valor de la variable `edad_paciente` y ahora en lugar de contener el valor numérico `5`, contiene el texto "cinco".

:::

*   **Booleanos:** Para valores de verdadero o falso.Por ejemplo, si un paciente es fumador o no. **NOTA**: en R usamos `TRUE` o `FALSE`, mientras que en Python usamos `True` o `False`. Este tipo de datos se verá más adelante.

  ```{{r}}
  es_fumador <- TRUE
  ```

  ```{{python}}
  es_fumador = True
  ```


## Ejercicio Práctico

Reemplaza las líneas `______` para crear las variables con los distintos tipos de datos: temperatura_corporal (*variable numérica*), el diagnostico (*string, texto o carácter*) y si el paciente tiene_fiebre o no (*booleano*). Solo sustituye las líneas `______` con estos valores y corre el código para verificar que su tipo de dato sea el que se pide.

- NOTA. Para verificar el tipo de dato de una variable, usamos funciones específicas en cada lenguaje:
  - En R, usamos `typeof()` para verificar el tipo de datos.
  - En Python, usamos `type()` para el mismo propósito
- No te preocupes por esta parte del código, se verá más adelante. Lo importante es que obtengas el tipo de dato que se pide.

:::: {.panel-tabset group="language"}

## R

- La salida de este ejercicio debe dar los valores:
  - `temperatura_corporal` = "double" (número decimal)
  - `tiene_fiebre` = "logical" (booleano)
  - `diagnostico` = "character" (texto)

```{webr}
#| exercise: ex_tipos_r

# 1. Crea una variable numérica llamada 'temperatura_corporal' con valor 37.5
temperatura_corporal <- _______

# 2. Crea una variable booleana llamada 'tiene_fiebre' que sea TRUE 
tiene_fiebre <- _______

# 3. Crea una variable tipo texto llamada 'diagnostico' con el valor "Paciente sano"
diagnostico <- _______

# 4. Ahora verifica el tipo de cada variable
typeof(temperatura_corporal)
typeof(tiene_fiebre)
typeof(diagnostico)

```

::: { .solution exercise="ex_tipos_r" } 
::: { .callout-tip collapse="false"}

## Solución

```r
# 1. Crea una variable numérica llamada 'temperatura_corporal' con valor 37.5
temperatura_corporal <- 37.5

# 2. Crea una variable booleana llamada 'tiene_fiebre' que sea TRUE si temperatura_corporal > 38
tiene_fiebre <- TRUE

# 3. Crea una variable tipo texto llamada 'diagnostico' con el valor "Paciente sano"
diagnostico <- "Paciente sano"

```

:::
:::

## Python

- La salida de este ejercicio debe dar los valores:
    - `temperatura_corporal` = "float" (número decimal)
    - `tiene_fiebre` = "bool" (booleano)
    - `diagnostico` = "str" (texto)

```{pyodide}
#| exercise: ex_tipos_py

# 1. Crea una variable numérica llamada 'temperatura_corporal' con valor 37.5
temperatura_corporal = _______

# 2. Crea una variable booleana llamada 'tiene_fiebre' que sea True
tiene_fiebre = _______

# 3. Crea una variable tipo texto llamada 'diagnostico' con el valor "Paciente sano"
diagnostico = _______

# 4. Ahora verifica el tipo de cada variable
print(type(temperatura_corporal))
print(type(tiene_fiebre))
print(type(diagnostico))

```

::: { .solution exercise="ex_tipos_py" } 
::: { .callout-tip collapse="false"}

## Solución

```python
# 1. Crea una variable numérica llamada 'temperatura_corporal' con valor 37.5
temperatura_corporal = 37.5

# 2. Crea una variable booleana llamada 'tiene_fiebre' que sea True si temperatura_corporal > 38
tiene_fiebre = temperatura_corporal > 38

# 3. Crea una variable tipo texto llamada 'diagnostico' con el valor "Paciente sano"
diagnostico = "Paciente sano"
```

::: 
:::

::::

## Operaciones con Variables

Una vez que tienes variables, puedes realizar operaciones con ellas. En el siguiente ejemplo, reemplaza las líneas "______" con tu peso (kg) y altura (m) (o inventa estos valores), y corre el código para obtener tu Índice de Masa Corporal (IMC). Observa que calculamos este índice con el nombre de las variables, las cuales guardan el valor que les asignaste.

### Operaciones Numéricas

:::: {.panel-tabset group="language"}

## R

```{webr}
peso_paciente_kg <- ______
altura_paciente_m <- ______

# Calcular el IMC (índice de masa corporal)
imc <- peso_paciente_kg / (altura_paciente_m ^ 2)

# Imprimir los resultados
imc
```

## Python

```{pyodide}
peso_paciente_kg = ______
altura_paciente_m = ______

# Calcular el IMC (índice de masa corporal)
imc = peso_paciente_kg / (altura_paciente_m ** 2)

# Imprimir los resultados
imc
```

::::
